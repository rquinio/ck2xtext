/**
 * generated by Xtext 2.17.1
 */
package ck2xtext.gfx.ck2gfx.util;

import ck2xtext.gfx.ck2gfx.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see ck2xtext.gfx.ck2gfx.Ck2gfxPackage
 * @generated
 */
public class Ck2gfxAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static Ck2gfxPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Ck2gfxAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = Ck2gfxPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Ck2gfxSwitch<Adapter> modelSwitch =
    new Ck2gfxSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseColor(Color object)
      {
        return createColorAdapter();
      }
      @Override
      public Adapter caseColorRatio(ColorRatio object)
      {
        return createColorRatioAdapter();
      }
      @Override
      public Adapter caseCoordinates(Coordinates object)
      {
        return createCoordinatesAdapter();
      }
      @Override
      public Adapter caseSpriteTypes(SpriteTypes object)
      {
        return createSpriteTypesAdapter();
      }
      @Override
      public Adapter caseSpriteType(SpriteType object)
      {
        return createSpriteTypeAdapter();
      }
      @Override
      public Adapter caseAnimatedSpriteType(AnimatedSpriteType object)
      {
        return createAnimatedSpriteTypeAdapter();
      }
      @Override
      public Adapter caseCorneredTileSpriteType(CorneredTileSpriteType object)
      {
        return createCorneredTileSpriteTypeAdapter();
      }
      @Override
      public Adapter caseProgressbarType(ProgressbarType object)
      {
        return createProgressbarTypeAdapter();
      }
      @Override
      public Adapter casePortraitType(PortraitType object)
      {
        return createPortraitTypeAdapter();
      }
      @Override
      public Adapter caseMaskedShieldType(MaskedShieldType object)
      {
        return createMaskedShieldTypeAdapter();
      }
      @Override
      public Adapter caseLineChartType(LineChartType object)
      {
        return createLineChartTypeAdapter();
      }
      @Override
      public Adapter caseCoatOfArmsType(CoatOfArmsType object)
      {
        return createCoatOfArmsTypeAdapter();
      }
      @Override
      public Adapter caseCoatOfArmsLayer(CoatOfArmsLayer object)
      {
        return createCoatOfArmsLayerAdapter();
      }
      @Override
      public Adapter caseObjectTypes(ObjectTypes object)
      {
        return createObjectTypesAdapter();
      }
      @Override
      public Adapter caseEMFXActorType(EMFXActorType object)
      {
        return createEMFXActorTypeAdapter();
      }
      @Override
      public Adapter caseAnimation(Animation object)
      {
        return createAnimationAdapter();
      }
      @Override
      public Adapter casePdxmesh(Pdxmesh object)
      {
        return createPdxmeshAdapter();
      }
      @Override
      public Adapter caseArrowType(ArrowType object)
      {
        return createArrowTypeAdapter();
      }
      @Override
      public Adapter caseBitmapFonts(BitmapFonts object)
      {
        return createBitmapFontsAdapter();
      }
      @Override
      public Adapter caseBitmapFont(BitmapFont object)
      {
        return createBitmapFontAdapter();
      }
      @Override
      public Adapter caseColorCode(ColorCode object)
      {
        return createColorCodeAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.Color <em>Color</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.Color
   * @generated
   */
  public Adapter createColorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.ColorRatio <em>Color Ratio</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.ColorRatio
   * @generated
   */
  public Adapter createColorRatioAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.Coordinates <em>Coordinates</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.Coordinates
   * @generated
   */
  public Adapter createCoordinatesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.SpriteTypes <em>Sprite Types</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.SpriteTypes
   * @generated
   */
  public Adapter createSpriteTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.SpriteType <em>Sprite Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.SpriteType
   * @generated
   */
  public Adapter createSpriteTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.AnimatedSpriteType <em>Animated Sprite Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.AnimatedSpriteType
   * @generated
   */
  public Adapter createAnimatedSpriteTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.CorneredTileSpriteType <em>Cornered Tile Sprite Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.CorneredTileSpriteType
   * @generated
   */
  public Adapter createCorneredTileSpriteTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.ProgressbarType <em>Progressbar Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.ProgressbarType
   * @generated
   */
  public Adapter createProgressbarTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.PortraitType <em>Portrait Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.PortraitType
   * @generated
   */
  public Adapter createPortraitTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.MaskedShieldType <em>Masked Shield Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.MaskedShieldType
   * @generated
   */
  public Adapter createMaskedShieldTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.LineChartType <em>Line Chart Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.LineChartType
   * @generated
   */
  public Adapter createLineChartTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.CoatOfArmsType <em>Coat Of Arms Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.CoatOfArmsType
   * @generated
   */
  public Adapter createCoatOfArmsTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.CoatOfArmsLayer <em>Coat Of Arms Layer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.CoatOfArmsLayer
   * @generated
   */
  public Adapter createCoatOfArmsLayerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.ObjectTypes <em>Object Types</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.ObjectTypes
   * @generated
   */
  public Adapter createObjectTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.EMFXActorType <em>EMFX Actor Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.EMFXActorType
   * @generated
   */
  public Adapter createEMFXActorTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.Animation <em>Animation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.Animation
   * @generated
   */
  public Adapter createAnimationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.Pdxmesh <em>Pdxmesh</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.Pdxmesh
   * @generated
   */
  public Adapter createPdxmeshAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.ArrowType <em>Arrow Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.ArrowType
   * @generated
   */
  public Adapter createArrowTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.BitmapFonts <em>Bitmap Fonts</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.BitmapFonts
   * @generated
   */
  public Adapter createBitmapFontsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.BitmapFont <em>Bitmap Font</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.BitmapFont
   * @generated
   */
  public Adapter createBitmapFontAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ck2xtext.gfx.ck2gfx.ColorCode <em>Color Code</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ck2xtext.gfx.ck2gfx.ColorCode
   * @generated
   */
  public Adapter createColorCodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //Ck2gfxAdapterFactory
