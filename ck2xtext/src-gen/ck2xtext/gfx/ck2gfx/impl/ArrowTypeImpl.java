/**
 * generated by Xtext 2.17.1
 */
package ck2xtext.gfx.ck2gfx.impl;

import ck2xtext.gfx.ck2gfx.ArrowType;
import ck2xtext.gfx.ck2gfx.Ck2gfxPackage;
import ck2xtext.gfx.ck2gfx.ColorRatio;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Arrow Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ArrowTypeImpl#getName <em>Name</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ArrowTypeImpl#getSize <em>Size</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ArrowTypeImpl#getTextureFile <em>Texture File</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ArrowTypeImpl#getBodyTexture <em>Body Texture</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ArrowTypeImpl#getColor <em>Color</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ArrowTypeImpl#getColor2 <em>Color2</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ArrowTypeImpl#getEndAt <em>End At</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ArrowTypeImpl#getHeight <em>Height</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ArrowTypeImpl#getType <em>Type</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ArrowTypeImpl#getHeading <em>Heading</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ArrowTypeImpl#getEffect <em>Effect</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ArrowTypeImpl extends MinimalEObjectImpl.Container implements ArrowType
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getSize() <em>Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSize()
   * @generated
   * @ordered
   */
  protected static final double SIZE_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getSize() <em>Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSize()
   * @generated
   * @ordered
   */
  protected double size = SIZE_EDEFAULT;

  /**
   * The default value of the '{@link #getTextureFile() <em>Texture File</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTextureFile()
   * @generated
   * @ordered
   */
  protected static final String TEXTURE_FILE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTextureFile() <em>Texture File</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTextureFile()
   * @generated
   * @ordered
   */
  protected String textureFile = TEXTURE_FILE_EDEFAULT;

  /**
   * The default value of the '{@link #getBodyTexture() <em>Body Texture</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBodyTexture()
   * @generated
   * @ordered
   */
  protected static final String BODY_TEXTURE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBodyTexture() <em>Body Texture</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBodyTexture()
   * @generated
   * @ordered
   */
  protected String bodyTexture = BODY_TEXTURE_EDEFAULT;

  /**
   * The cached value of the '{@link #getColor() <em>Color</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColor()
   * @generated
   * @ordered
   */
  protected ColorRatio color;

  /**
   * The cached value of the '{@link #getColor2() <em>Color2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColor2()
   * @generated
   * @ordered
   */
  protected ColorRatio color2;

  /**
   * The default value of the '{@link #getEndAt() <em>End At</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndAt()
   * @generated
   * @ordered
   */
  protected static final double END_AT_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getEndAt() <em>End At</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndAt()
   * @generated
   * @ordered
   */
  protected double endAt = END_AT_EDEFAULT;

  /**
   * The default value of the '{@link #getHeight() <em>Height</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHeight()
   * @generated
   * @ordered
   */
  protected static final double HEIGHT_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getHeight() <em>Height</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHeight()
   * @generated
   * @ordered
   */
  protected double height = HEIGHT_EDEFAULT;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final int TYPE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected int type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getHeading() <em>Heading</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHeading()
   * @generated
   * @ordered
   */
  protected static final double HEADING_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getHeading() <em>Heading</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHeading()
   * @generated
   * @ordered
   */
  protected double heading = HEADING_EDEFAULT;

  /**
   * The default value of the '{@link #getEffect() <em>Effect</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEffect()
   * @generated
   * @ordered
   */
  protected static final String EFFECT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEffect() <em>Effect</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEffect()
   * @generated
   * @ordered
   */
  protected String effect = EFFECT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ArrowTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Ck2gfxPackage.Literals.ARROW_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.ARROW_TYPE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public double getSize()
  {
    return size;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSize(double newSize)
  {
    double oldSize = size;
    size = newSize;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.ARROW_TYPE__SIZE, oldSize, size));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTextureFile()
  {
    return textureFile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTextureFile(String newTextureFile)
  {
    String oldTextureFile = textureFile;
    textureFile = newTextureFile;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.ARROW_TYPE__TEXTURE_FILE, oldTextureFile, textureFile));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBodyTexture()
  {
    return bodyTexture;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBodyTexture(String newBodyTexture)
  {
    String oldBodyTexture = bodyTexture;
    bodyTexture = newBodyTexture;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.ARROW_TYPE__BODY_TEXTURE, oldBodyTexture, bodyTexture));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ColorRatio getColor()
  {
    return color;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetColor(ColorRatio newColor, NotificationChain msgs)
  {
    ColorRatio oldColor = color;
    color = newColor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.ARROW_TYPE__COLOR, oldColor, newColor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setColor(ColorRatio newColor)
  {
    if (newColor != color)
    {
      NotificationChain msgs = null;
      if (color != null)
        msgs = ((InternalEObject)color).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Ck2gfxPackage.ARROW_TYPE__COLOR, null, msgs);
      if (newColor != null)
        msgs = ((InternalEObject)newColor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Ck2gfxPackage.ARROW_TYPE__COLOR, null, msgs);
      msgs = basicSetColor(newColor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.ARROW_TYPE__COLOR, newColor, newColor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ColorRatio getColor2()
  {
    return color2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetColor2(ColorRatio newColor2, NotificationChain msgs)
  {
    ColorRatio oldColor2 = color2;
    color2 = newColor2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.ARROW_TYPE__COLOR2, oldColor2, newColor2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setColor2(ColorRatio newColor2)
  {
    if (newColor2 != color2)
    {
      NotificationChain msgs = null;
      if (color2 != null)
        msgs = ((InternalEObject)color2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Ck2gfxPackage.ARROW_TYPE__COLOR2, null, msgs);
      if (newColor2 != null)
        msgs = ((InternalEObject)newColor2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Ck2gfxPackage.ARROW_TYPE__COLOR2, null, msgs);
      msgs = basicSetColor2(newColor2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.ARROW_TYPE__COLOR2, newColor2, newColor2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public double getEndAt()
  {
    return endAt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEndAt(double newEndAt)
  {
    double oldEndAt = endAt;
    endAt = newEndAt;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.ARROW_TYPE__END_AT, oldEndAt, endAt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public double getHeight()
  {
    return height;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHeight(double newHeight)
  {
    double oldHeight = height;
    height = newHeight;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.ARROW_TYPE__HEIGHT, oldHeight, height));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(int newType)
  {
    int oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.ARROW_TYPE__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public double getHeading()
  {
    return heading;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHeading(double newHeading)
  {
    double oldHeading = heading;
    heading = newHeading;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.ARROW_TYPE__HEADING, oldHeading, heading));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getEffect()
  {
    return effect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEffect(String newEffect)
  {
    String oldEffect = effect;
    effect = newEffect;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.ARROW_TYPE__EFFECT, oldEffect, effect));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.ARROW_TYPE__COLOR:
        return basicSetColor(null, msgs);
      case Ck2gfxPackage.ARROW_TYPE__COLOR2:
        return basicSetColor2(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.ARROW_TYPE__NAME:
        return getName();
      case Ck2gfxPackage.ARROW_TYPE__SIZE:
        return getSize();
      case Ck2gfxPackage.ARROW_TYPE__TEXTURE_FILE:
        return getTextureFile();
      case Ck2gfxPackage.ARROW_TYPE__BODY_TEXTURE:
        return getBodyTexture();
      case Ck2gfxPackage.ARROW_TYPE__COLOR:
        return getColor();
      case Ck2gfxPackage.ARROW_TYPE__COLOR2:
        return getColor2();
      case Ck2gfxPackage.ARROW_TYPE__END_AT:
        return getEndAt();
      case Ck2gfxPackage.ARROW_TYPE__HEIGHT:
        return getHeight();
      case Ck2gfxPackage.ARROW_TYPE__TYPE:
        return getType();
      case Ck2gfxPackage.ARROW_TYPE__HEADING:
        return getHeading();
      case Ck2gfxPackage.ARROW_TYPE__EFFECT:
        return getEffect();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.ARROW_TYPE__NAME:
        setName((String)newValue);
        return;
      case Ck2gfxPackage.ARROW_TYPE__SIZE:
        setSize((Double)newValue);
        return;
      case Ck2gfxPackage.ARROW_TYPE__TEXTURE_FILE:
        setTextureFile((String)newValue);
        return;
      case Ck2gfxPackage.ARROW_TYPE__BODY_TEXTURE:
        setBodyTexture((String)newValue);
        return;
      case Ck2gfxPackage.ARROW_TYPE__COLOR:
        setColor((ColorRatio)newValue);
        return;
      case Ck2gfxPackage.ARROW_TYPE__COLOR2:
        setColor2((ColorRatio)newValue);
        return;
      case Ck2gfxPackage.ARROW_TYPE__END_AT:
        setEndAt((Double)newValue);
        return;
      case Ck2gfxPackage.ARROW_TYPE__HEIGHT:
        setHeight((Double)newValue);
        return;
      case Ck2gfxPackage.ARROW_TYPE__TYPE:
        setType((Integer)newValue);
        return;
      case Ck2gfxPackage.ARROW_TYPE__HEADING:
        setHeading((Double)newValue);
        return;
      case Ck2gfxPackage.ARROW_TYPE__EFFECT:
        setEffect((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.ARROW_TYPE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case Ck2gfxPackage.ARROW_TYPE__SIZE:
        setSize(SIZE_EDEFAULT);
        return;
      case Ck2gfxPackage.ARROW_TYPE__TEXTURE_FILE:
        setTextureFile(TEXTURE_FILE_EDEFAULT);
        return;
      case Ck2gfxPackage.ARROW_TYPE__BODY_TEXTURE:
        setBodyTexture(BODY_TEXTURE_EDEFAULT);
        return;
      case Ck2gfxPackage.ARROW_TYPE__COLOR:
        setColor((ColorRatio)null);
        return;
      case Ck2gfxPackage.ARROW_TYPE__COLOR2:
        setColor2((ColorRatio)null);
        return;
      case Ck2gfxPackage.ARROW_TYPE__END_AT:
        setEndAt(END_AT_EDEFAULT);
        return;
      case Ck2gfxPackage.ARROW_TYPE__HEIGHT:
        setHeight(HEIGHT_EDEFAULT);
        return;
      case Ck2gfxPackage.ARROW_TYPE__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case Ck2gfxPackage.ARROW_TYPE__HEADING:
        setHeading(HEADING_EDEFAULT);
        return;
      case Ck2gfxPackage.ARROW_TYPE__EFFECT:
        setEffect(EFFECT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.ARROW_TYPE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case Ck2gfxPackage.ARROW_TYPE__SIZE:
        return size != SIZE_EDEFAULT;
      case Ck2gfxPackage.ARROW_TYPE__TEXTURE_FILE:
        return TEXTURE_FILE_EDEFAULT == null ? textureFile != null : !TEXTURE_FILE_EDEFAULT.equals(textureFile);
      case Ck2gfxPackage.ARROW_TYPE__BODY_TEXTURE:
        return BODY_TEXTURE_EDEFAULT == null ? bodyTexture != null : !BODY_TEXTURE_EDEFAULT.equals(bodyTexture);
      case Ck2gfxPackage.ARROW_TYPE__COLOR:
        return color != null;
      case Ck2gfxPackage.ARROW_TYPE__COLOR2:
        return color2 != null;
      case Ck2gfxPackage.ARROW_TYPE__END_AT:
        return endAt != END_AT_EDEFAULT;
      case Ck2gfxPackage.ARROW_TYPE__HEIGHT:
        return height != HEIGHT_EDEFAULT;
      case Ck2gfxPackage.ARROW_TYPE__TYPE:
        return type != TYPE_EDEFAULT;
      case Ck2gfxPackage.ARROW_TYPE__HEADING:
        return heading != HEADING_EDEFAULT;
      case Ck2gfxPackage.ARROW_TYPE__EFFECT:
        return EFFECT_EDEFAULT == null ? effect != null : !EFFECT_EDEFAULT.equals(effect);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", size: ");
    result.append(size);
    result.append(", textureFile: ");
    result.append(textureFile);
    result.append(", bodyTexture: ");
    result.append(bodyTexture);
    result.append(", endAt: ");
    result.append(endAt);
    result.append(", height: ");
    result.append(height);
    result.append(", type: ");
    result.append(type);
    result.append(", heading: ");
    result.append(heading);
    result.append(", effect: ");
    result.append(effect);
    result.append(')');
    return result.toString();
  }

} //ArrowTypeImpl
