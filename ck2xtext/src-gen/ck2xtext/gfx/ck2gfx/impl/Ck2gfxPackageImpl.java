/**
 * generated by Xtext 2.14.0
 */
package ck2xtext.gfx.ck2gfx.impl;

import ck2xtext.gfx.ck2gfx.AnimatedSpriteType;
import ck2xtext.gfx.ck2gfx.Animation;
import ck2xtext.gfx.ck2gfx.ArrowType;
import ck2xtext.gfx.ck2gfx.BitmapFont;
import ck2xtext.gfx.ck2gfx.BitmapFonts;
import ck2xtext.gfx.ck2gfx.Ck2gfxFactory;
import ck2xtext.gfx.ck2gfx.Ck2gfxPackage;
import ck2xtext.gfx.ck2gfx.CoatOfArmsLayer;
import ck2xtext.gfx.ck2gfx.CoatOfArmsType;
import ck2xtext.gfx.ck2gfx.Color;
import ck2xtext.gfx.ck2gfx.ColorCode;
import ck2xtext.gfx.ck2gfx.ColorRatio;
import ck2xtext.gfx.ck2gfx.Coordinates;
import ck2xtext.gfx.ck2gfx.CorneredTileSpriteType;
import ck2xtext.gfx.ck2gfx.EMFXActorType;
import ck2xtext.gfx.ck2gfx.LineChartType;
import ck2xtext.gfx.ck2gfx.MaskedShieldType;
import ck2xtext.gfx.ck2gfx.Model;
import ck2xtext.gfx.ck2gfx.ObjectTypes;
import ck2xtext.gfx.ck2gfx.Pdxmesh;
import ck2xtext.gfx.ck2gfx.PortraitType;
import ck2xtext.gfx.ck2gfx.ProgressbarType;
import ck2xtext.gfx.ck2gfx.SpriteType;
import ck2xtext.gfx.ck2gfx.SpriteTypes;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class Ck2gfxPackageImpl extends EPackageImpl implements Ck2gfxPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass colorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass colorRatioEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass coordinatesEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass spriteTypesEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass spriteTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass animatedSpriteTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass corneredTileSpriteTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass progressbarTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass portraitTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass maskedShieldTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass lineChartTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass coatOfArmsTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass coatOfArmsLayerEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass objectTypesEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass emfxActorTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass animationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass pdxmeshEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass arrowTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bitmapFontsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bitmapFontEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass colorCodeEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see ck2xtext.gfx.ck2gfx.Ck2gfxPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private Ck2gfxPackageImpl()
  {
    super(eNS_URI, Ck2gfxFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link Ck2gfxPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static Ck2gfxPackage init()
  {
    if (isInited) return (Ck2gfxPackage)EPackage.Registry.INSTANCE.getEPackage(Ck2gfxPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredCk2gfxPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    Ck2gfxPackageImpl theCk2gfxPackage = registeredCk2gfxPackage instanceof Ck2gfxPackageImpl ? (Ck2gfxPackageImpl)registeredCk2gfxPackage : new Ck2gfxPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theCk2gfxPackage.createPackageContents();

    // Initialize created meta-data
    theCk2gfxPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theCk2gfxPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(Ck2gfxPackage.eNS_URI, theCk2gfxPackage);
    return theCk2gfxPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getModel()
  {
    return modelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getModel_Types()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getColor()
  {
    return colorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getColor_R()
  {
    return (EAttribute)colorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getColor_G()
  {
    return (EAttribute)colorEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getColor_B()
  {
    return (EAttribute)colorEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getColorRatio()
  {
    return colorRatioEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getColorRatio_R()
  {
    return (EAttribute)colorRatioEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getColorRatio_G()
  {
    return (EAttribute)colorRatioEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getColorRatio_B()
  {
    return (EAttribute)colorRatioEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCoordinates()
  {
    return coordinatesEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCoordinates_X()
  {
    return (EAttribute)coordinatesEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCoordinates_Y()
  {
    return (EAttribute)coordinatesEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSpriteTypes()
  {
    return spriteTypesEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSpriteTypes_Types()
  {
    return (EReference)spriteTypesEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSpriteType()
  {
    return spriteTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSpriteType_Name()
  {
    return (EAttribute)spriteTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSpriteType_TextureFile()
  {
    return (EAttribute)spriteTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSpriteType_NoOfFrames()
  {
    return (EAttribute)spriteTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSpriteType_LoadType()
  {
    return (EAttribute)spriteTypeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSpriteType_AllwaysTransparent()
  {
    return (EAttribute)spriteTypeEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSpriteType_NoRefCount()
  {
    return (EAttribute)spriteTypeEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSpriteType_EffectFile()
  {
    return (EAttribute)spriteTypeEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSpriteType_TransparenceCheck()
  {
    return (EAttribute)spriteTypeEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSpriteType_CanBeLowres()
  {
    return (EAttribute)spriteTypeEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSpriteType_ClickSound()
  {
    return (EAttribute)spriteTypeEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAnimatedSpriteType()
  {
    return animatedSpriteTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getAnimatedSpriteType_Name()
  {
    return (EAttribute)animatedSpriteTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getAnimatedSpriteType_Texturefile()
  {
    return (EAttribute)animatedSpriteTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getAnimatedSpriteType_NoOfFrames()
  {
    return (EAttribute)animatedSpriteTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getAnimatedSpriteType_AnimationRateFps()
  {
    return (EAttribute)animatedSpriteTypeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getAnimatedSpriteType_Looping()
  {
    return (EAttribute)animatedSpriteTypeEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getAnimatedSpriteType_PlayOnShow()
  {
    return (EAttribute)animatedSpriteTypeEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCorneredTileSpriteType()
  {
    return corneredTileSpriteTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCorneredTileSpriteType_Name()
  {
    return (EAttribute)corneredTileSpriteTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCorneredTileSpriteType_Size()
  {
    return (EReference)corneredTileSpriteTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCorneredTileSpriteType_Texturefile()
  {
    return (EAttribute)corneredTileSpriteTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCorneredTileSpriteType_BorderSize()
  {
    return (EReference)corneredTileSpriteTypeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCorneredTileSpriteType_AllwaysTransparent()
  {
    return (EAttribute)corneredTileSpriteTypeEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCorneredTileSpriteType_NoRefCount()
  {
    return (EAttribute)corneredTileSpriteTypeEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCorneredTileSpriteType_LoadType()
  {
    return (EAttribute)corneredTileSpriteTypeEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCorneredTileSpriteType_TilingCenter()
  {
    return (EAttribute)corneredTileSpriteTypeEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getProgressbarType()
  {
    return progressbarTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getProgressbarType_Name()
  {
    return (EAttribute)progressbarTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getProgressbarType_Color()
  {
    return (EReference)progressbarTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getProgressbarType_Color2()
  {
    return (EReference)progressbarTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getProgressbarType_TextureFile1()
  {
    return (EAttribute)progressbarTypeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getProgressbarType_TextureFile2()
  {
    return (EAttribute)progressbarTypeEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getProgressbarType_Size()
  {
    return (EReference)progressbarTypeEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getProgressbarType_Horizontal()
  {
    return (EAttribute)progressbarTypeEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getProgressbarType_EffectFile()
  {
    return (EAttribute)progressbarTypeEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getProgressbarType_AllwaysTransparent()
  {
    return (EAttribute)progressbarTypeEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getProgressbarType_MaxValue()
  {
    return (EAttribute)progressbarTypeEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getProgressbarType_LoadType()
  {
    return (EAttribute)progressbarTypeEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getProgressbarType_NoRefCount()
  {
    return (EAttribute)progressbarTypeEClass.getEStructuralFeatures().get(11);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPortraitType()
  {
    return portraitTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getPortraitType_Name()
  {
    return (EAttribute)portraitTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getPortraitType_EffectFile()
  {
    return (EAttribute)portraitTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getPortraitType_Layers()
  {
    return (EAttribute)portraitTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getPortraitType_HairColorIndex()
  {
    return (EAttribute)portraitTypeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPortraitType_HairColor()
  {
    return (EReference)portraitTypeEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getPortraitType_EyeColorIndex()
  {
    return (EAttribute)portraitTypeEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPortraitType_EyeColor()
  {
    return (EReference)portraitTypeEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getPortraitType_HeadgearThatHidesHair()
  {
    return (EAttribute)portraitTypeEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMaskedShieldType()
  {
    return maskedShieldTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMaskedShieldType_Name()
  {
    return (EAttribute)maskedShieldTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMaskedShieldType_TextureFile1()
  {
    return (EAttribute)maskedShieldTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMaskedShieldType_TextureFile2()
  {
    return (EAttribute)maskedShieldTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMaskedShieldType_EffectFile()
  {
    return (EAttribute)maskedShieldTypeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMaskedShieldType_AllwaysTransparent()
  {
    return (EAttribute)maskedShieldTypeEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMaskedShieldType_ClickSound()
  {
    return (EAttribute)maskedShieldTypeEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLineChartType()
  {
    return lineChartTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLineChartType_Name()
  {
    return (EAttribute)lineChartTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLineChartType_Size()
  {
    return (EReference)lineChartTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLineChartType_LineWidth()
  {
    return (EAttribute)lineChartTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCoatOfArmsType()
  {
    return coatOfArmsTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCoatOfArmsType_Name()
  {
    return (EAttribute)coatOfArmsTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCoatOfArmsType_Frame()
  {
    return (EAttribute)coatOfArmsTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCoatOfArmsType_Mask()
  {
    return (EAttribute)coatOfArmsTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCoatOfArmsType_SealOverlay()
  {
    return (EAttribute)coatOfArmsTypeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCoatOfArmsType_Effect()
  {
    return (EAttribute)coatOfArmsTypeEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCoatOfArmsType_Layers()
  {
    return (EReference)coatOfArmsTypeEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getCoatOfArmsLayer()
  {
    return coatOfArmsLayerEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCoatOfArmsLayer_Mask()
  {
    return (EAttribute)coatOfArmsLayerEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getCoatOfArmsLayer_Center()
  {
    return (EReference)coatOfArmsLayerEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getCoatOfArmsLayer_Scale()
  {
    return (EAttribute)coatOfArmsLayerEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getObjectTypes()
  {
    return objectTypesEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getObjectTypes_Types()
  {
    return (EReference)objectTypesEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getEMFXActorType()
  {
    return emfxActorTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getEMFXActorType_Name()
  {
    return (EAttribute)emfxActorTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getEMFXActorType_ActorFile()
  {
    return (EAttribute)emfxActorTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getEMFXActorType_Animation()
  {
    return (EReference)emfxActorTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getEMFXActorType_Idle()
  {
    return (EAttribute)emfxActorTypeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getEMFXActorType_Move()
  {
    return (EAttribute)emfxActorTypeEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getEMFXActorType_Attack()
  {
    return (EAttribute)emfxActorTypeEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getEMFXActorType_Scale()
  {
    return (EAttribute)emfxActorTypeEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getEMFXActorType_UseAnimation()
  {
    return (EAttribute)emfxActorTypeEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getEMFXActorType_CullDistance()
  {
    return (EAttribute)emfxActorTypeEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getEMFXActorType_ScaleOnCullDistance()
  {
    return (EAttribute)emfxActorTypeEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAnimation()
  {
    return animationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getAnimation_Name()
  {
    return (EAttribute)animationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getAnimation_File()
  {
    return (EAttribute)animationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getAnimation_DefaultAnimationTime()
  {
    return (EAttribute)animationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPdxmesh()
  {
    return pdxmeshEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getPdxmesh_Name()
  {
    return (EAttribute)pdxmeshEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getPdxmesh_ActorFile()
  {
    return (EAttribute)pdxmeshEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getPdxmesh_Scale()
  {
    return (EAttribute)pdxmeshEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getPdxmesh_CullDistance()
  {
    return (EAttribute)pdxmeshEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getPdxmesh_ScaleOnCullDistance()
  {
    return (EAttribute)pdxmeshEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getArrowType()
  {
    return arrowTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getArrowType_Name()
  {
    return (EAttribute)arrowTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getArrowType_Size()
  {
    return (EAttribute)arrowTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getArrowType_TextureFile()
  {
    return (EAttribute)arrowTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getArrowType_BodyTexture()
  {
    return (EAttribute)arrowTypeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getArrowType_Color()
  {
    return (EReference)arrowTypeEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getArrowType_Color2()
  {
    return (EReference)arrowTypeEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getArrowType_EndAt()
  {
    return (EAttribute)arrowTypeEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getArrowType_Height()
  {
    return (EAttribute)arrowTypeEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getArrowType_Type()
  {
    return (EAttribute)arrowTypeEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getArrowType_Heading()
  {
    return (EAttribute)arrowTypeEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getArrowType_Effect()
  {
    return (EAttribute)arrowTypeEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBitmapFonts()
  {
    return bitmapFontsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBitmapFonts_Types()
  {
    return (EReference)bitmapFontsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBitmapFont()
  {
    return bitmapFontEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBitmapFont_Name()
  {
    return (EAttribute)bitmapFontEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBitmapFont_FontName()
  {
    return (EAttribute)bitmapFontEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBitmapFont_Color()
  {
    return (EAttribute)bitmapFontEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBitmapFont_Effect()
  {
    return (EAttribute)bitmapFontEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBitmapFont_Colorcodes()
  {
    return (EReference)bitmapFontEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getColorCode()
  {
    return colorCodeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getColorCode_Key()
  {
    return (EAttribute)colorCodeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getColorCode_Value()
  {
    return (EReference)colorCodeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Ck2gfxFactory getCk2gfxFactory()
  {
    return (Ck2gfxFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    modelEClass = createEClass(MODEL);
    createEReference(modelEClass, MODEL__TYPES);

    colorEClass = createEClass(COLOR);
    createEAttribute(colorEClass, COLOR__R);
    createEAttribute(colorEClass, COLOR__G);
    createEAttribute(colorEClass, COLOR__B);

    colorRatioEClass = createEClass(COLOR_RATIO);
    createEAttribute(colorRatioEClass, COLOR_RATIO__R);
    createEAttribute(colorRatioEClass, COLOR_RATIO__G);
    createEAttribute(colorRatioEClass, COLOR_RATIO__B);

    coordinatesEClass = createEClass(COORDINATES);
    createEAttribute(coordinatesEClass, COORDINATES__X);
    createEAttribute(coordinatesEClass, COORDINATES__Y);

    spriteTypesEClass = createEClass(SPRITE_TYPES);
    createEReference(spriteTypesEClass, SPRITE_TYPES__TYPES);

    spriteTypeEClass = createEClass(SPRITE_TYPE);
    createEAttribute(spriteTypeEClass, SPRITE_TYPE__NAME);
    createEAttribute(spriteTypeEClass, SPRITE_TYPE__TEXTURE_FILE);
    createEAttribute(spriteTypeEClass, SPRITE_TYPE__NO_OF_FRAMES);
    createEAttribute(spriteTypeEClass, SPRITE_TYPE__LOAD_TYPE);
    createEAttribute(spriteTypeEClass, SPRITE_TYPE__ALLWAYS_TRANSPARENT);
    createEAttribute(spriteTypeEClass, SPRITE_TYPE__NO_REF_COUNT);
    createEAttribute(spriteTypeEClass, SPRITE_TYPE__EFFECT_FILE);
    createEAttribute(spriteTypeEClass, SPRITE_TYPE__TRANSPARENCE_CHECK);
    createEAttribute(spriteTypeEClass, SPRITE_TYPE__CAN_BE_LOWRES);
    createEAttribute(spriteTypeEClass, SPRITE_TYPE__CLICK_SOUND);

    animatedSpriteTypeEClass = createEClass(ANIMATED_SPRITE_TYPE);
    createEAttribute(animatedSpriteTypeEClass, ANIMATED_SPRITE_TYPE__NAME);
    createEAttribute(animatedSpriteTypeEClass, ANIMATED_SPRITE_TYPE__TEXTUREFILE);
    createEAttribute(animatedSpriteTypeEClass, ANIMATED_SPRITE_TYPE__NO_OF_FRAMES);
    createEAttribute(animatedSpriteTypeEClass, ANIMATED_SPRITE_TYPE__ANIMATION_RATE_FPS);
    createEAttribute(animatedSpriteTypeEClass, ANIMATED_SPRITE_TYPE__LOOPING);
    createEAttribute(animatedSpriteTypeEClass, ANIMATED_SPRITE_TYPE__PLAY_ON_SHOW);

    corneredTileSpriteTypeEClass = createEClass(CORNERED_TILE_SPRITE_TYPE);
    createEAttribute(corneredTileSpriteTypeEClass, CORNERED_TILE_SPRITE_TYPE__NAME);
    createEReference(corneredTileSpriteTypeEClass, CORNERED_TILE_SPRITE_TYPE__SIZE);
    createEAttribute(corneredTileSpriteTypeEClass, CORNERED_TILE_SPRITE_TYPE__TEXTUREFILE);
    createEReference(corneredTileSpriteTypeEClass, CORNERED_TILE_SPRITE_TYPE__BORDER_SIZE);
    createEAttribute(corneredTileSpriteTypeEClass, CORNERED_TILE_SPRITE_TYPE__ALLWAYS_TRANSPARENT);
    createEAttribute(corneredTileSpriteTypeEClass, CORNERED_TILE_SPRITE_TYPE__NO_REF_COUNT);
    createEAttribute(corneredTileSpriteTypeEClass, CORNERED_TILE_SPRITE_TYPE__LOAD_TYPE);
    createEAttribute(corneredTileSpriteTypeEClass, CORNERED_TILE_SPRITE_TYPE__TILING_CENTER);

    progressbarTypeEClass = createEClass(PROGRESSBAR_TYPE);
    createEAttribute(progressbarTypeEClass, PROGRESSBAR_TYPE__NAME);
    createEReference(progressbarTypeEClass, PROGRESSBAR_TYPE__COLOR);
    createEReference(progressbarTypeEClass, PROGRESSBAR_TYPE__COLOR2);
    createEAttribute(progressbarTypeEClass, PROGRESSBAR_TYPE__TEXTURE_FILE1);
    createEAttribute(progressbarTypeEClass, PROGRESSBAR_TYPE__TEXTURE_FILE2);
    createEReference(progressbarTypeEClass, PROGRESSBAR_TYPE__SIZE);
    createEAttribute(progressbarTypeEClass, PROGRESSBAR_TYPE__HORIZONTAL);
    createEAttribute(progressbarTypeEClass, PROGRESSBAR_TYPE__EFFECT_FILE);
    createEAttribute(progressbarTypeEClass, PROGRESSBAR_TYPE__ALLWAYS_TRANSPARENT);
    createEAttribute(progressbarTypeEClass, PROGRESSBAR_TYPE__MAX_VALUE);
    createEAttribute(progressbarTypeEClass, PROGRESSBAR_TYPE__LOAD_TYPE);
    createEAttribute(progressbarTypeEClass, PROGRESSBAR_TYPE__NO_REF_COUNT);

    portraitTypeEClass = createEClass(PORTRAIT_TYPE);
    createEAttribute(portraitTypeEClass, PORTRAIT_TYPE__NAME);
    createEAttribute(portraitTypeEClass, PORTRAIT_TYPE__EFFECT_FILE);
    createEAttribute(portraitTypeEClass, PORTRAIT_TYPE__LAYERS);
    createEAttribute(portraitTypeEClass, PORTRAIT_TYPE__HAIR_COLOR_INDEX);
    createEReference(portraitTypeEClass, PORTRAIT_TYPE__HAIR_COLOR);
    createEAttribute(portraitTypeEClass, PORTRAIT_TYPE__EYE_COLOR_INDEX);
    createEReference(portraitTypeEClass, PORTRAIT_TYPE__EYE_COLOR);
    createEAttribute(portraitTypeEClass, PORTRAIT_TYPE__HEADGEAR_THAT_HIDES_HAIR);

    maskedShieldTypeEClass = createEClass(MASKED_SHIELD_TYPE);
    createEAttribute(maskedShieldTypeEClass, MASKED_SHIELD_TYPE__NAME);
    createEAttribute(maskedShieldTypeEClass, MASKED_SHIELD_TYPE__TEXTURE_FILE1);
    createEAttribute(maskedShieldTypeEClass, MASKED_SHIELD_TYPE__TEXTURE_FILE2);
    createEAttribute(maskedShieldTypeEClass, MASKED_SHIELD_TYPE__EFFECT_FILE);
    createEAttribute(maskedShieldTypeEClass, MASKED_SHIELD_TYPE__ALLWAYS_TRANSPARENT);
    createEAttribute(maskedShieldTypeEClass, MASKED_SHIELD_TYPE__CLICK_SOUND);

    lineChartTypeEClass = createEClass(LINE_CHART_TYPE);
    createEAttribute(lineChartTypeEClass, LINE_CHART_TYPE__NAME);
    createEReference(lineChartTypeEClass, LINE_CHART_TYPE__SIZE);
    createEAttribute(lineChartTypeEClass, LINE_CHART_TYPE__LINE_WIDTH);

    coatOfArmsTypeEClass = createEClass(COAT_OF_ARMS_TYPE);
    createEAttribute(coatOfArmsTypeEClass, COAT_OF_ARMS_TYPE__NAME);
    createEAttribute(coatOfArmsTypeEClass, COAT_OF_ARMS_TYPE__FRAME);
    createEAttribute(coatOfArmsTypeEClass, COAT_OF_ARMS_TYPE__MASK);
    createEAttribute(coatOfArmsTypeEClass, COAT_OF_ARMS_TYPE__SEAL_OVERLAY);
    createEAttribute(coatOfArmsTypeEClass, COAT_OF_ARMS_TYPE__EFFECT);
    createEReference(coatOfArmsTypeEClass, COAT_OF_ARMS_TYPE__LAYERS);

    coatOfArmsLayerEClass = createEClass(COAT_OF_ARMS_LAYER);
    createEAttribute(coatOfArmsLayerEClass, COAT_OF_ARMS_LAYER__MASK);
    createEReference(coatOfArmsLayerEClass, COAT_OF_ARMS_LAYER__CENTER);
    createEAttribute(coatOfArmsLayerEClass, COAT_OF_ARMS_LAYER__SCALE);

    objectTypesEClass = createEClass(OBJECT_TYPES);
    createEReference(objectTypesEClass, OBJECT_TYPES__TYPES);

    emfxActorTypeEClass = createEClass(EMFX_ACTOR_TYPE);
    createEAttribute(emfxActorTypeEClass, EMFX_ACTOR_TYPE__NAME);
    createEAttribute(emfxActorTypeEClass, EMFX_ACTOR_TYPE__ACTOR_FILE);
    createEReference(emfxActorTypeEClass, EMFX_ACTOR_TYPE__ANIMATION);
    createEAttribute(emfxActorTypeEClass, EMFX_ACTOR_TYPE__IDLE);
    createEAttribute(emfxActorTypeEClass, EMFX_ACTOR_TYPE__MOVE);
    createEAttribute(emfxActorTypeEClass, EMFX_ACTOR_TYPE__ATTACK);
    createEAttribute(emfxActorTypeEClass, EMFX_ACTOR_TYPE__SCALE);
    createEAttribute(emfxActorTypeEClass, EMFX_ACTOR_TYPE__USE_ANIMATION);
    createEAttribute(emfxActorTypeEClass, EMFX_ACTOR_TYPE__CULL_DISTANCE);
    createEAttribute(emfxActorTypeEClass, EMFX_ACTOR_TYPE__SCALE_ON_CULL_DISTANCE);

    animationEClass = createEClass(ANIMATION);
    createEAttribute(animationEClass, ANIMATION__NAME);
    createEAttribute(animationEClass, ANIMATION__FILE);
    createEAttribute(animationEClass, ANIMATION__DEFAULT_ANIMATION_TIME);

    pdxmeshEClass = createEClass(PDXMESH);
    createEAttribute(pdxmeshEClass, PDXMESH__NAME);
    createEAttribute(pdxmeshEClass, PDXMESH__ACTOR_FILE);
    createEAttribute(pdxmeshEClass, PDXMESH__SCALE);
    createEAttribute(pdxmeshEClass, PDXMESH__CULL_DISTANCE);
    createEAttribute(pdxmeshEClass, PDXMESH__SCALE_ON_CULL_DISTANCE);

    arrowTypeEClass = createEClass(ARROW_TYPE);
    createEAttribute(arrowTypeEClass, ARROW_TYPE__NAME);
    createEAttribute(arrowTypeEClass, ARROW_TYPE__SIZE);
    createEAttribute(arrowTypeEClass, ARROW_TYPE__TEXTURE_FILE);
    createEAttribute(arrowTypeEClass, ARROW_TYPE__BODY_TEXTURE);
    createEReference(arrowTypeEClass, ARROW_TYPE__COLOR);
    createEReference(arrowTypeEClass, ARROW_TYPE__COLOR2);
    createEAttribute(arrowTypeEClass, ARROW_TYPE__END_AT);
    createEAttribute(arrowTypeEClass, ARROW_TYPE__HEIGHT);
    createEAttribute(arrowTypeEClass, ARROW_TYPE__TYPE);
    createEAttribute(arrowTypeEClass, ARROW_TYPE__HEADING);
    createEAttribute(arrowTypeEClass, ARROW_TYPE__EFFECT);

    bitmapFontsEClass = createEClass(BITMAP_FONTS);
    createEReference(bitmapFontsEClass, BITMAP_FONTS__TYPES);

    bitmapFontEClass = createEClass(BITMAP_FONT);
    createEAttribute(bitmapFontEClass, BITMAP_FONT__NAME);
    createEAttribute(bitmapFontEClass, BITMAP_FONT__FONT_NAME);
    createEAttribute(bitmapFontEClass, BITMAP_FONT__COLOR);
    createEAttribute(bitmapFontEClass, BITMAP_FONT__EFFECT);
    createEReference(bitmapFontEClass, BITMAP_FONT__COLORCODES);

    colorCodeEClass = createEClass(COLOR_CODE);
    createEAttribute(colorCodeEClass, COLOR_CODE__KEY);
    createEReference(colorCodeEClass, COLOR_CODE__VALUE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes

    // Initialize classes and features; add operations and parameters
    initEClass(modelEClass, Model.class, "Model", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getModel_Types(), ecorePackage.getEObject(), null, "types", null, 0, -1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(colorEClass, Color.class, "Color", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getColor_R(), ecorePackage.getEInt(), "r", null, 0, 1, Color.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getColor_G(), ecorePackage.getEInt(), "g", null, 0, 1, Color.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getColor_B(), ecorePackage.getEInt(), "b", null, 0, 1, Color.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(colorRatioEClass, ColorRatio.class, "ColorRatio", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getColorRatio_R(), ecorePackage.getEDouble(), "r", null, 0, 1, ColorRatio.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getColorRatio_G(), ecorePackage.getEDouble(), "g", null, 0, 1, ColorRatio.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getColorRatio_B(), ecorePackage.getEDouble(), "b", null, 0, 1, ColorRatio.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(coordinatesEClass, Coordinates.class, "Coordinates", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCoordinates_X(), ecorePackage.getEDouble(), "x", null, 0, 1, Coordinates.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCoordinates_Y(), ecorePackage.getEDouble(), "y", null, 0, 1, Coordinates.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(spriteTypesEClass, SpriteTypes.class, "SpriteTypes", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSpriteTypes_Types(), ecorePackage.getEObject(), null, "types", null, 0, -1, SpriteTypes.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(spriteTypeEClass, SpriteType.class, "SpriteType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSpriteType_Name(), ecorePackage.getEString(), "name", null, 0, 1, SpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSpriteType_TextureFile(), ecorePackage.getEString(), "textureFile", null, 0, 1, SpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSpriteType_NoOfFrames(), ecorePackage.getEInt(), "noOfFrames", null, 0, 1, SpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSpriteType_LoadType(), ecorePackage.getEString(), "loadType", null, 0, 1, SpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSpriteType_AllwaysTransparent(), ecorePackage.getEBoolean(), "allwaysTransparent", null, 0, 1, SpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSpriteType_NoRefCount(), ecorePackage.getEBoolean(), "noRefCount", null, 0, 1, SpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSpriteType_EffectFile(), ecorePackage.getEString(), "effectFile", null, 0, 1, SpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSpriteType_TransparenceCheck(), ecorePackage.getEBoolean(), "transparenceCheck", null, 0, 1, SpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSpriteType_CanBeLowres(), ecorePackage.getEBoolean(), "canBeLowres", null, 0, 1, SpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSpriteType_ClickSound(), ecorePackage.getEString(), "clickSound", null, 0, 1, SpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(animatedSpriteTypeEClass, AnimatedSpriteType.class, "AnimatedSpriteType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAnimatedSpriteType_Name(), ecorePackage.getEString(), "name", null, 0, 1, AnimatedSpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAnimatedSpriteType_Texturefile(), ecorePackage.getEString(), "texturefile", null, 0, 1, AnimatedSpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAnimatedSpriteType_NoOfFrames(), ecorePackage.getEInt(), "noOfFrames", null, 0, 1, AnimatedSpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAnimatedSpriteType_AnimationRateFps(), ecorePackage.getEDouble(), "animationRateFps", null, 0, 1, AnimatedSpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAnimatedSpriteType_Looping(), ecorePackage.getEBoolean(), "looping", null, 0, 1, AnimatedSpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAnimatedSpriteType_PlayOnShow(), ecorePackage.getEBoolean(), "playOnShow", null, 0, 1, AnimatedSpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(corneredTileSpriteTypeEClass, CorneredTileSpriteType.class, "CorneredTileSpriteType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCorneredTileSpriteType_Name(), ecorePackage.getEString(), "name", null, 0, 1, CorneredTileSpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCorneredTileSpriteType_Size(), this.getCoordinates(), null, "size", null, 0, 1, CorneredTileSpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCorneredTileSpriteType_Texturefile(), ecorePackage.getEString(), "texturefile", null, 0, 1, CorneredTileSpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCorneredTileSpriteType_BorderSize(), this.getCoordinates(), null, "borderSize", null, 0, 1, CorneredTileSpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCorneredTileSpriteType_AllwaysTransparent(), ecorePackage.getEBoolean(), "allwaysTransparent", null, 0, 1, CorneredTileSpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCorneredTileSpriteType_NoRefCount(), ecorePackage.getEBoolean(), "noRefCount", null, 0, 1, CorneredTileSpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCorneredTileSpriteType_LoadType(), ecorePackage.getEString(), "loadType", null, 0, 1, CorneredTileSpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCorneredTileSpriteType_TilingCenter(), ecorePackage.getEBoolean(), "tilingCenter", null, 0, 1, CorneredTileSpriteType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(progressbarTypeEClass, ProgressbarType.class, "ProgressbarType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getProgressbarType_Name(), ecorePackage.getEString(), "name", null, 0, 1, ProgressbarType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getProgressbarType_Color(), this.getColorRatio(), null, "color", null, 0, 1, ProgressbarType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getProgressbarType_Color2(), this.getColorRatio(), null, "color2", null, 0, 1, ProgressbarType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getProgressbarType_TextureFile1(), ecorePackage.getEString(), "textureFile1", null, 0, 1, ProgressbarType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getProgressbarType_TextureFile2(), ecorePackage.getEString(), "textureFile2", null, 0, 1, ProgressbarType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getProgressbarType_Size(), this.getCoordinates(), null, "size", null, 0, 1, ProgressbarType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getProgressbarType_Horizontal(), ecorePackage.getEBoolean(), "horizontal", null, 0, 1, ProgressbarType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getProgressbarType_EffectFile(), ecorePackage.getEString(), "effectFile", null, 0, 1, ProgressbarType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getProgressbarType_AllwaysTransparent(), ecorePackage.getEBoolean(), "allwaysTransparent", null, 0, 1, ProgressbarType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getProgressbarType_MaxValue(), ecorePackage.getEDouble(), "maxValue", null, 0, 1, ProgressbarType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getProgressbarType_LoadType(), ecorePackage.getEString(), "loadType", null, 0, 1, ProgressbarType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getProgressbarType_NoRefCount(), ecorePackage.getEBoolean(), "noRefCount", null, 0, 1, ProgressbarType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(portraitTypeEClass, PortraitType.class, "PortraitType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPortraitType_Name(), ecorePackage.getEString(), "name", null, 0, 1, PortraitType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPortraitType_EffectFile(), ecorePackage.getEString(), "effectFile", null, 0, 1, PortraitType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPortraitType_Layers(), ecorePackage.getEString(), "layers", null, 0, -1, PortraitType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPortraitType_HairColorIndex(), ecorePackage.getEInt(), "hairColorIndex", null, 0, 1, PortraitType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPortraitType_HairColor(), this.getColor(), null, "hairColor", null, 0, -1, PortraitType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPortraitType_EyeColorIndex(), ecorePackage.getEInt(), "eyeColorIndex", null, 0, 1, PortraitType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPortraitType_EyeColor(), this.getColor(), null, "eyeColor", null, 0, -1, PortraitType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPortraitType_HeadgearThatHidesHair(), ecorePackage.getEInt(), "headgearThatHidesHair", null, 0, -1, PortraitType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(maskedShieldTypeEClass, MaskedShieldType.class, "MaskedShieldType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMaskedShieldType_Name(), ecorePackage.getEString(), "name", null, 0, 1, MaskedShieldType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMaskedShieldType_TextureFile1(), ecorePackage.getEString(), "textureFile1", null, 0, 1, MaskedShieldType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMaskedShieldType_TextureFile2(), ecorePackage.getEString(), "textureFile2", null, 0, 1, MaskedShieldType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMaskedShieldType_EffectFile(), ecorePackage.getEString(), "effectFile", null, 0, 1, MaskedShieldType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMaskedShieldType_AllwaysTransparent(), ecorePackage.getEBoolean(), "allwaysTransparent", null, 0, 1, MaskedShieldType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMaskedShieldType_ClickSound(), ecorePackage.getEString(), "clickSound", null, 0, 1, MaskedShieldType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(lineChartTypeEClass, LineChartType.class, "LineChartType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLineChartType_Name(), ecorePackage.getEString(), "name", null, 0, 1, LineChartType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLineChartType_Size(), this.getCoordinates(), null, "size", null, 0, 1, LineChartType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLineChartType_LineWidth(), ecorePackage.getEInt(), "lineWidth", null, 0, 1, LineChartType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(coatOfArmsTypeEClass, CoatOfArmsType.class, "CoatOfArmsType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCoatOfArmsType_Name(), ecorePackage.getEString(), "name", null, 0, 1, CoatOfArmsType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCoatOfArmsType_Frame(), ecorePackage.getEString(), "frame", null, 0, 1, CoatOfArmsType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCoatOfArmsType_Mask(), ecorePackage.getEString(), "mask", null, 0, 1, CoatOfArmsType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCoatOfArmsType_SealOverlay(), ecorePackage.getEString(), "sealOverlay", null, 0, 1, CoatOfArmsType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCoatOfArmsType_Effect(), ecorePackage.getEString(), "effect", null, 0, 1, CoatOfArmsType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCoatOfArmsType_Layers(), this.getCoatOfArmsLayer(), null, "layers", null, 0, -1, CoatOfArmsType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(coatOfArmsLayerEClass, CoatOfArmsLayer.class, "CoatOfArmsLayer", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCoatOfArmsLayer_Mask(), ecorePackage.getEString(), "mask", null, 0, 1, CoatOfArmsLayer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCoatOfArmsLayer_Center(), this.getCoordinates(), null, "center", null, 0, 1, CoatOfArmsLayer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCoatOfArmsLayer_Scale(), ecorePackage.getEDouble(), "scale", null, 0, 1, CoatOfArmsLayer.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(objectTypesEClass, ObjectTypes.class, "ObjectTypes", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getObjectTypes_Types(), ecorePackage.getEObject(), null, "types", null, 0, -1, ObjectTypes.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(emfxActorTypeEClass, EMFXActorType.class, "EMFXActorType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getEMFXActorType_Name(), ecorePackage.getEString(), "name", null, 0, 1, EMFXActorType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEMFXActorType_ActorFile(), ecorePackage.getEString(), "actorFile", null, 0, 1, EMFXActorType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEMFXActorType_Animation(), this.getAnimation(), null, "animation", null, 0, 1, EMFXActorType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEMFXActorType_Idle(), ecorePackage.getEString(), "idle", null, 0, 1, EMFXActorType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEMFXActorType_Move(), ecorePackage.getEString(), "move", null, 0, 1, EMFXActorType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEMFXActorType_Attack(), ecorePackage.getEString(), "attack", null, 0, 1, EMFXActorType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEMFXActorType_Scale(), ecorePackage.getEDouble(), "scale", null, 0, 1, EMFXActorType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEMFXActorType_UseAnimation(), ecorePackage.getEBoolean(), "useAnimation", null, 0, 1, EMFXActorType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEMFXActorType_CullDistance(), ecorePackage.getEDouble(), "cullDistance", null, 0, 1, EMFXActorType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEMFXActorType_ScaleOnCullDistance(), ecorePackage.getEBoolean(), "scaleOnCullDistance", null, 0, 1, EMFXActorType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(animationEClass, Animation.class, "Animation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAnimation_Name(), ecorePackage.getEString(), "name", null, 0, 1, Animation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAnimation_File(), ecorePackage.getEString(), "file", null, 0, 1, Animation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAnimation_DefaultAnimationTime(), ecorePackage.getEDouble(), "defaultAnimationTime", null, 0, 1, Animation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(pdxmeshEClass, Pdxmesh.class, "Pdxmesh", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPdxmesh_Name(), ecorePackage.getEString(), "name", null, 0, 1, Pdxmesh.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPdxmesh_ActorFile(), ecorePackage.getEString(), "actorFile", null, 0, 1, Pdxmesh.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPdxmesh_Scale(), ecorePackage.getEDouble(), "scale", null, 0, 1, Pdxmesh.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPdxmesh_CullDistance(), ecorePackage.getEDouble(), "cullDistance", null, 0, 1, Pdxmesh.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPdxmesh_ScaleOnCullDistance(), ecorePackage.getEBoolean(), "scaleOnCullDistance", null, 0, 1, Pdxmesh.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(arrowTypeEClass, ArrowType.class, "ArrowType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getArrowType_Name(), ecorePackage.getEString(), "name", null, 0, 1, ArrowType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getArrowType_Size(), ecorePackage.getEDouble(), "size", null, 0, 1, ArrowType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getArrowType_TextureFile(), ecorePackage.getEString(), "textureFile", null, 0, 1, ArrowType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getArrowType_BodyTexture(), ecorePackage.getEString(), "bodyTexture", null, 0, 1, ArrowType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getArrowType_Color(), this.getColorRatio(), null, "color", null, 0, 1, ArrowType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getArrowType_Color2(), this.getColorRatio(), null, "color2", null, 0, 1, ArrowType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getArrowType_EndAt(), ecorePackage.getEDouble(), "endAt", null, 0, 1, ArrowType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getArrowType_Height(), ecorePackage.getEDouble(), "height", null, 0, 1, ArrowType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getArrowType_Type(), ecorePackage.getEInt(), "type", null, 0, 1, ArrowType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getArrowType_Heading(), ecorePackage.getEDouble(), "heading", null, 0, 1, ArrowType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getArrowType_Effect(), ecorePackage.getEString(), "effect", null, 0, 1, ArrowType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(bitmapFontsEClass, BitmapFonts.class, "BitmapFonts", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBitmapFonts_Types(), this.getBitmapFont(), null, "types", null, 0, -1, BitmapFonts.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(bitmapFontEClass, BitmapFont.class, "BitmapFont", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBitmapFont_Name(), ecorePackage.getEString(), "name", null, 0, 1, BitmapFont.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBitmapFont_FontName(), ecorePackage.getEString(), "fontName", null, 0, 1, BitmapFont.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBitmapFont_Color(), ecorePackage.getEInt(), "color", null, 0, 1, BitmapFont.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBitmapFont_Effect(), ecorePackage.getEBoolean(), "effect", null, 0, 1, BitmapFont.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBitmapFont_Colorcodes(), this.getColorCode(), null, "colorcodes", null, 0, -1, BitmapFont.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(colorCodeEClass, ColorCode.class, "ColorCode", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getColorCode_Key(), ecorePackage.getEString(), "key", null, 0, 1, ColorCode.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getColorCode_Value(), this.getColor(), null, "value", null, 0, 1, ColorCode.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //Ck2gfxPackageImpl
