/**
 * generated by Xtext 2.14.0
 */
package ck2xtext.gfx.ck2gfx.impl;

import ck2xtext.gfx.ck2gfx.Ck2gfxPackage;
import ck2xtext.gfx.ck2gfx.ColorRatio;
import ck2xtext.gfx.ck2gfx.Coordinates;
import ck2xtext.gfx.ck2gfx.ProgressbarType;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Progressbar Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ProgressbarTypeImpl#getName <em>Name</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ProgressbarTypeImpl#getColor <em>Color</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ProgressbarTypeImpl#getColor2 <em>Color2</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ProgressbarTypeImpl#getTextureFile1 <em>Texture File1</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ProgressbarTypeImpl#getTextureFile2 <em>Texture File2</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ProgressbarTypeImpl#getSize <em>Size</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ProgressbarTypeImpl#isHorizontal <em>Horizontal</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ProgressbarTypeImpl#getEffectFile <em>Effect File</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ProgressbarTypeImpl#isAllwaysTransparent <em>Allways Transparent</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ProgressbarTypeImpl#getMaxValue <em>Max Value</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ProgressbarTypeImpl#getLoadType <em>Load Type</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.ProgressbarTypeImpl#isNoRefCount <em>No Ref Count</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProgressbarTypeImpl extends MinimalEObjectImpl.Container implements ProgressbarType
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getColor() <em>Color</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColor()
   * @generated
   * @ordered
   */
  protected ColorRatio color;

  /**
   * The cached value of the '{@link #getColor2() <em>Color2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColor2()
   * @generated
   * @ordered
   */
  protected ColorRatio color2;

  /**
   * The default value of the '{@link #getTextureFile1() <em>Texture File1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTextureFile1()
   * @generated
   * @ordered
   */
  protected static final String TEXTURE_FILE1_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTextureFile1() <em>Texture File1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTextureFile1()
   * @generated
   * @ordered
   */
  protected String textureFile1 = TEXTURE_FILE1_EDEFAULT;

  /**
   * The default value of the '{@link #getTextureFile2() <em>Texture File2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTextureFile2()
   * @generated
   * @ordered
   */
  protected static final String TEXTURE_FILE2_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTextureFile2() <em>Texture File2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTextureFile2()
   * @generated
   * @ordered
   */
  protected String textureFile2 = TEXTURE_FILE2_EDEFAULT;

  /**
   * The cached value of the '{@link #getSize() <em>Size</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSize()
   * @generated
   * @ordered
   */
  protected Coordinates size;

  /**
   * The default value of the '{@link #isHorizontal() <em>Horizontal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHorizontal()
   * @generated
   * @ordered
   */
  protected static final boolean HORIZONTAL_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isHorizontal() <em>Horizontal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isHorizontal()
   * @generated
   * @ordered
   */
  protected boolean horizontal = HORIZONTAL_EDEFAULT;

  /**
   * The default value of the '{@link #getEffectFile() <em>Effect File</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEffectFile()
   * @generated
   * @ordered
   */
  protected static final String EFFECT_FILE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEffectFile() <em>Effect File</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEffectFile()
   * @generated
   * @ordered
   */
  protected String effectFile = EFFECT_FILE_EDEFAULT;

  /**
   * The default value of the '{@link #isAllwaysTransparent() <em>Allways Transparent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAllwaysTransparent()
   * @generated
   * @ordered
   */
  protected static final boolean ALLWAYS_TRANSPARENT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAllwaysTransparent() <em>Allways Transparent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAllwaysTransparent()
   * @generated
   * @ordered
   */
  protected boolean allwaysTransparent = ALLWAYS_TRANSPARENT_EDEFAULT;

  /**
   * The default value of the '{@link #getMaxValue() <em>Max Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxValue()
   * @generated
   * @ordered
   */
  protected static final double MAX_VALUE_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getMaxValue() <em>Max Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxValue()
   * @generated
   * @ordered
   */
  protected double maxValue = MAX_VALUE_EDEFAULT;

  /**
   * The default value of the '{@link #getLoadType() <em>Load Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLoadType()
   * @generated
   * @ordered
   */
  protected static final String LOAD_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLoadType() <em>Load Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLoadType()
   * @generated
   * @ordered
   */
  protected String loadType = LOAD_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #isNoRefCount() <em>No Ref Count</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNoRefCount()
   * @generated
   * @ordered
   */
  protected static final boolean NO_REF_COUNT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNoRefCount() <em>No Ref Count</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNoRefCount()
   * @generated
   * @ordered
   */
  protected boolean noRefCount = NO_REF_COUNT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProgressbarTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Ck2gfxPackage.Literals.PROGRESSBAR_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.PROGRESSBAR_TYPE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ColorRatio getColor()
  {
    return color;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetColor(ColorRatio newColor, NotificationChain msgs)
  {
    ColorRatio oldColor = color;
    color = newColor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.PROGRESSBAR_TYPE__COLOR, oldColor, newColor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setColor(ColorRatio newColor)
  {
    if (newColor != color)
    {
      NotificationChain msgs = null;
      if (color != null)
        msgs = ((InternalEObject)color).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Ck2gfxPackage.PROGRESSBAR_TYPE__COLOR, null, msgs);
      if (newColor != null)
        msgs = ((InternalEObject)newColor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Ck2gfxPackage.PROGRESSBAR_TYPE__COLOR, null, msgs);
      msgs = basicSetColor(newColor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.PROGRESSBAR_TYPE__COLOR, newColor, newColor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ColorRatio getColor2()
  {
    return color2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetColor2(ColorRatio newColor2, NotificationChain msgs)
  {
    ColorRatio oldColor2 = color2;
    color2 = newColor2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.PROGRESSBAR_TYPE__COLOR2, oldColor2, newColor2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setColor2(ColorRatio newColor2)
  {
    if (newColor2 != color2)
    {
      NotificationChain msgs = null;
      if (color2 != null)
        msgs = ((InternalEObject)color2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Ck2gfxPackage.PROGRESSBAR_TYPE__COLOR2, null, msgs);
      if (newColor2 != null)
        msgs = ((InternalEObject)newColor2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Ck2gfxPackage.PROGRESSBAR_TYPE__COLOR2, null, msgs);
      msgs = basicSetColor2(newColor2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.PROGRESSBAR_TYPE__COLOR2, newColor2, newColor2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTextureFile1()
  {
    return textureFile1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTextureFile1(String newTextureFile1)
  {
    String oldTextureFile1 = textureFile1;
    textureFile1 = newTextureFile1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.PROGRESSBAR_TYPE__TEXTURE_FILE1, oldTextureFile1, textureFile1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTextureFile2()
  {
    return textureFile2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTextureFile2(String newTextureFile2)
  {
    String oldTextureFile2 = textureFile2;
    textureFile2 = newTextureFile2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.PROGRESSBAR_TYPE__TEXTURE_FILE2, oldTextureFile2, textureFile2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Coordinates getSize()
  {
    return size;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSize(Coordinates newSize, NotificationChain msgs)
  {
    Coordinates oldSize = size;
    size = newSize;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.PROGRESSBAR_TYPE__SIZE, oldSize, newSize);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSize(Coordinates newSize)
  {
    if (newSize != size)
    {
      NotificationChain msgs = null;
      if (size != null)
        msgs = ((InternalEObject)size).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Ck2gfxPackage.PROGRESSBAR_TYPE__SIZE, null, msgs);
      if (newSize != null)
        msgs = ((InternalEObject)newSize).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Ck2gfxPackage.PROGRESSBAR_TYPE__SIZE, null, msgs);
      msgs = basicSetSize(newSize, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.PROGRESSBAR_TYPE__SIZE, newSize, newSize));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isHorizontal()
  {
    return horizontal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setHorizontal(boolean newHorizontal)
  {
    boolean oldHorizontal = horizontal;
    horizontal = newHorizontal;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.PROGRESSBAR_TYPE__HORIZONTAL, oldHorizontal, horizontal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getEffectFile()
  {
    return effectFile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEffectFile(String newEffectFile)
  {
    String oldEffectFile = effectFile;
    effectFile = newEffectFile;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.PROGRESSBAR_TYPE__EFFECT_FILE, oldEffectFile, effectFile));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isAllwaysTransparent()
  {
    return allwaysTransparent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAllwaysTransparent(boolean newAllwaysTransparent)
  {
    boolean oldAllwaysTransparent = allwaysTransparent;
    allwaysTransparent = newAllwaysTransparent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.PROGRESSBAR_TYPE__ALLWAYS_TRANSPARENT, oldAllwaysTransparent, allwaysTransparent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public double getMaxValue()
  {
    return maxValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMaxValue(double newMaxValue)
  {
    double oldMaxValue = maxValue;
    maxValue = newMaxValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.PROGRESSBAR_TYPE__MAX_VALUE, oldMaxValue, maxValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLoadType()
  {
    return loadType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLoadType(String newLoadType)
  {
    String oldLoadType = loadType;
    loadType = newLoadType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.PROGRESSBAR_TYPE__LOAD_TYPE, oldLoadType, loadType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isNoRefCount()
  {
    return noRefCount;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNoRefCount(boolean newNoRefCount)
  {
    boolean oldNoRefCount = noRefCount;
    noRefCount = newNoRefCount;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.PROGRESSBAR_TYPE__NO_REF_COUNT, oldNoRefCount, noRefCount));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.PROGRESSBAR_TYPE__COLOR:
        return basicSetColor(null, msgs);
      case Ck2gfxPackage.PROGRESSBAR_TYPE__COLOR2:
        return basicSetColor2(null, msgs);
      case Ck2gfxPackage.PROGRESSBAR_TYPE__SIZE:
        return basicSetSize(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.PROGRESSBAR_TYPE__NAME:
        return getName();
      case Ck2gfxPackage.PROGRESSBAR_TYPE__COLOR:
        return getColor();
      case Ck2gfxPackage.PROGRESSBAR_TYPE__COLOR2:
        return getColor2();
      case Ck2gfxPackage.PROGRESSBAR_TYPE__TEXTURE_FILE1:
        return getTextureFile1();
      case Ck2gfxPackage.PROGRESSBAR_TYPE__TEXTURE_FILE2:
        return getTextureFile2();
      case Ck2gfxPackage.PROGRESSBAR_TYPE__SIZE:
        return getSize();
      case Ck2gfxPackage.PROGRESSBAR_TYPE__HORIZONTAL:
        return isHorizontal();
      case Ck2gfxPackage.PROGRESSBAR_TYPE__EFFECT_FILE:
        return getEffectFile();
      case Ck2gfxPackage.PROGRESSBAR_TYPE__ALLWAYS_TRANSPARENT:
        return isAllwaysTransparent();
      case Ck2gfxPackage.PROGRESSBAR_TYPE__MAX_VALUE:
        return getMaxValue();
      case Ck2gfxPackage.PROGRESSBAR_TYPE__LOAD_TYPE:
        return getLoadType();
      case Ck2gfxPackage.PROGRESSBAR_TYPE__NO_REF_COUNT:
        return isNoRefCount();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.PROGRESSBAR_TYPE__NAME:
        setName((String)newValue);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__COLOR:
        setColor((ColorRatio)newValue);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__COLOR2:
        setColor2((ColorRatio)newValue);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__TEXTURE_FILE1:
        setTextureFile1((String)newValue);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__TEXTURE_FILE2:
        setTextureFile2((String)newValue);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__SIZE:
        setSize((Coordinates)newValue);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__HORIZONTAL:
        setHorizontal((Boolean)newValue);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__EFFECT_FILE:
        setEffectFile((String)newValue);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__ALLWAYS_TRANSPARENT:
        setAllwaysTransparent((Boolean)newValue);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__MAX_VALUE:
        setMaxValue((Double)newValue);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__LOAD_TYPE:
        setLoadType((String)newValue);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__NO_REF_COUNT:
        setNoRefCount((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.PROGRESSBAR_TYPE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__COLOR:
        setColor((ColorRatio)null);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__COLOR2:
        setColor2((ColorRatio)null);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__TEXTURE_FILE1:
        setTextureFile1(TEXTURE_FILE1_EDEFAULT);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__TEXTURE_FILE2:
        setTextureFile2(TEXTURE_FILE2_EDEFAULT);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__SIZE:
        setSize((Coordinates)null);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__HORIZONTAL:
        setHorizontal(HORIZONTAL_EDEFAULT);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__EFFECT_FILE:
        setEffectFile(EFFECT_FILE_EDEFAULT);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__ALLWAYS_TRANSPARENT:
        setAllwaysTransparent(ALLWAYS_TRANSPARENT_EDEFAULT);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__MAX_VALUE:
        setMaxValue(MAX_VALUE_EDEFAULT);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__LOAD_TYPE:
        setLoadType(LOAD_TYPE_EDEFAULT);
        return;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__NO_REF_COUNT:
        setNoRefCount(NO_REF_COUNT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.PROGRESSBAR_TYPE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case Ck2gfxPackage.PROGRESSBAR_TYPE__COLOR:
        return color != null;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__COLOR2:
        return color2 != null;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__TEXTURE_FILE1:
        return TEXTURE_FILE1_EDEFAULT == null ? textureFile1 != null : !TEXTURE_FILE1_EDEFAULT.equals(textureFile1);
      case Ck2gfxPackage.PROGRESSBAR_TYPE__TEXTURE_FILE2:
        return TEXTURE_FILE2_EDEFAULT == null ? textureFile2 != null : !TEXTURE_FILE2_EDEFAULT.equals(textureFile2);
      case Ck2gfxPackage.PROGRESSBAR_TYPE__SIZE:
        return size != null;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__HORIZONTAL:
        return horizontal != HORIZONTAL_EDEFAULT;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__EFFECT_FILE:
        return EFFECT_FILE_EDEFAULT == null ? effectFile != null : !EFFECT_FILE_EDEFAULT.equals(effectFile);
      case Ck2gfxPackage.PROGRESSBAR_TYPE__ALLWAYS_TRANSPARENT:
        return allwaysTransparent != ALLWAYS_TRANSPARENT_EDEFAULT;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__MAX_VALUE:
        return maxValue != MAX_VALUE_EDEFAULT;
      case Ck2gfxPackage.PROGRESSBAR_TYPE__LOAD_TYPE:
        return LOAD_TYPE_EDEFAULT == null ? loadType != null : !LOAD_TYPE_EDEFAULT.equals(loadType);
      case Ck2gfxPackage.PROGRESSBAR_TYPE__NO_REF_COUNT:
        return noRefCount != NO_REF_COUNT_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", textureFile1: ");
    result.append(textureFile1);
    result.append(", textureFile2: ");
    result.append(textureFile2);
    result.append(", horizontal: ");
    result.append(horizontal);
    result.append(", effectFile: ");
    result.append(effectFile);
    result.append(", allwaysTransparent: ");
    result.append(allwaysTransparent);
    result.append(", maxValue: ");
    result.append(maxValue);
    result.append(", loadType: ");
    result.append(loadType);
    result.append(", noRefCount: ");
    result.append(noRefCount);
    result.append(')');
    return result.toString();
  }

} //ProgressbarTypeImpl
