/**
 * generated by Xtext 2.15.0
 */
package ck2xtext.gfx.ck2gfx.impl;

import ck2xtext.gfx.ck2gfx.Ck2gfxPackage;
import ck2xtext.gfx.ck2gfx.Coordinates;
import ck2xtext.gfx.ck2gfx.CorneredTileSpriteType;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Cornered Tile Sprite Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.CorneredTileSpriteTypeImpl#getName <em>Name</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.CorneredTileSpriteTypeImpl#getSize <em>Size</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.CorneredTileSpriteTypeImpl#getTexturefile <em>Texturefile</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.CorneredTileSpriteTypeImpl#getBorderSize <em>Border Size</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.CorneredTileSpriteTypeImpl#isAllwaysTransparent <em>Allways Transparent</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.CorneredTileSpriteTypeImpl#isNoRefCount <em>No Ref Count</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.CorneredTileSpriteTypeImpl#getLoadType <em>Load Type</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.CorneredTileSpriteTypeImpl#isTilingCenter <em>Tiling Center</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CorneredTileSpriteTypeImpl extends MinimalEObjectImpl.Container implements CorneredTileSpriteType
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSize() <em>Size</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSize()
   * @generated
   * @ordered
   */
  protected Coordinates size;

  /**
   * The default value of the '{@link #getTexturefile() <em>Texturefile</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTexturefile()
   * @generated
   * @ordered
   */
  protected static final String TEXTUREFILE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTexturefile() <em>Texturefile</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTexturefile()
   * @generated
   * @ordered
   */
  protected String texturefile = TEXTUREFILE_EDEFAULT;

  /**
   * The cached value of the '{@link #getBorderSize() <em>Border Size</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBorderSize()
   * @generated
   * @ordered
   */
  protected Coordinates borderSize;

  /**
   * The default value of the '{@link #isAllwaysTransparent() <em>Allways Transparent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAllwaysTransparent()
   * @generated
   * @ordered
   */
  protected static final boolean ALLWAYS_TRANSPARENT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAllwaysTransparent() <em>Allways Transparent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAllwaysTransparent()
   * @generated
   * @ordered
   */
  protected boolean allwaysTransparent = ALLWAYS_TRANSPARENT_EDEFAULT;

  /**
   * The default value of the '{@link #isNoRefCount() <em>No Ref Count</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNoRefCount()
   * @generated
   * @ordered
   */
  protected static final boolean NO_REF_COUNT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNoRefCount() <em>No Ref Count</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNoRefCount()
   * @generated
   * @ordered
   */
  protected boolean noRefCount = NO_REF_COUNT_EDEFAULT;

  /**
   * The default value of the '{@link #getLoadType() <em>Load Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLoadType()
   * @generated
   * @ordered
   */
  protected static final String LOAD_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLoadType() <em>Load Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLoadType()
   * @generated
   * @ordered
   */
  protected String loadType = LOAD_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #isTilingCenter() <em>Tiling Center</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTilingCenter()
   * @generated
   * @ordered
   */
  protected static final boolean TILING_CENTER_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isTilingCenter() <em>Tiling Center</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTilingCenter()
   * @generated
   * @ordered
   */
  protected boolean tilingCenter = TILING_CENTER_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CorneredTileSpriteTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Ck2gfxPackage.Literals.CORNERED_TILE_SPRITE_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Coordinates getSize()
  {
    return size;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSize(Coordinates newSize, NotificationChain msgs)
  {
    Coordinates oldSize = size;
    size = newSize;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__SIZE, oldSize, newSize);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSize(Coordinates newSize)
  {
    if (newSize != size)
    {
      NotificationChain msgs = null;
      if (size != null)
        msgs = ((InternalEObject)size).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__SIZE, null, msgs);
      if (newSize != null)
        msgs = ((InternalEObject)newSize).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__SIZE, null, msgs);
      msgs = basicSetSize(newSize, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__SIZE, newSize, newSize));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTexturefile()
  {
    return texturefile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTexturefile(String newTexturefile)
  {
    String oldTexturefile = texturefile;
    texturefile = newTexturefile;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__TEXTUREFILE, oldTexturefile, texturefile));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Coordinates getBorderSize()
  {
    return borderSize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBorderSize(Coordinates newBorderSize, NotificationChain msgs)
  {
    Coordinates oldBorderSize = borderSize;
    borderSize = newBorderSize;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__BORDER_SIZE, oldBorderSize, newBorderSize);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBorderSize(Coordinates newBorderSize)
  {
    if (newBorderSize != borderSize)
    {
      NotificationChain msgs = null;
      if (borderSize != null)
        msgs = ((InternalEObject)borderSize).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__BORDER_SIZE, null, msgs);
      if (newBorderSize != null)
        msgs = ((InternalEObject)newBorderSize).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__BORDER_SIZE, null, msgs);
      msgs = basicSetBorderSize(newBorderSize, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__BORDER_SIZE, newBorderSize, newBorderSize));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isAllwaysTransparent()
  {
    return allwaysTransparent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAllwaysTransparent(boolean newAllwaysTransparent)
  {
    boolean oldAllwaysTransparent = allwaysTransparent;
    allwaysTransparent = newAllwaysTransparent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__ALLWAYS_TRANSPARENT, oldAllwaysTransparent, allwaysTransparent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isNoRefCount()
  {
    return noRefCount;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNoRefCount(boolean newNoRefCount)
  {
    boolean oldNoRefCount = noRefCount;
    noRefCount = newNoRefCount;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__NO_REF_COUNT, oldNoRefCount, noRefCount));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLoadType()
  {
    return loadType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLoadType(String newLoadType)
  {
    String oldLoadType = loadType;
    loadType = newLoadType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__LOAD_TYPE, oldLoadType, loadType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isTilingCenter()
  {
    return tilingCenter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTilingCenter(boolean newTilingCenter)
  {
    boolean oldTilingCenter = tilingCenter;
    tilingCenter = newTilingCenter;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__TILING_CENTER, oldTilingCenter, tilingCenter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__SIZE:
        return basicSetSize(null, msgs);
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__BORDER_SIZE:
        return basicSetBorderSize(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__NAME:
        return getName();
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__SIZE:
        return getSize();
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__TEXTUREFILE:
        return getTexturefile();
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__BORDER_SIZE:
        return getBorderSize();
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__ALLWAYS_TRANSPARENT:
        return isAllwaysTransparent();
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__NO_REF_COUNT:
        return isNoRefCount();
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__LOAD_TYPE:
        return getLoadType();
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__TILING_CENTER:
        return isTilingCenter();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__NAME:
        setName((String)newValue);
        return;
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__SIZE:
        setSize((Coordinates)newValue);
        return;
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__TEXTUREFILE:
        setTexturefile((String)newValue);
        return;
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__BORDER_SIZE:
        setBorderSize((Coordinates)newValue);
        return;
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__ALLWAYS_TRANSPARENT:
        setAllwaysTransparent((Boolean)newValue);
        return;
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__NO_REF_COUNT:
        setNoRefCount((Boolean)newValue);
        return;
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__LOAD_TYPE:
        setLoadType((String)newValue);
        return;
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__TILING_CENTER:
        setTilingCenter((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__SIZE:
        setSize((Coordinates)null);
        return;
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__TEXTUREFILE:
        setTexturefile(TEXTUREFILE_EDEFAULT);
        return;
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__BORDER_SIZE:
        setBorderSize((Coordinates)null);
        return;
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__ALLWAYS_TRANSPARENT:
        setAllwaysTransparent(ALLWAYS_TRANSPARENT_EDEFAULT);
        return;
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__NO_REF_COUNT:
        setNoRefCount(NO_REF_COUNT_EDEFAULT);
        return;
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__LOAD_TYPE:
        setLoadType(LOAD_TYPE_EDEFAULT);
        return;
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__TILING_CENTER:
        setTilingCenter(TILING_CENTER_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__SIZE:
        return size != null;
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__TEXTUREFILE:
        return TEXTUREFILE_EDEFAULT == null ? texturefile != null : !TEXTUREFILE_EDEFAULT.equals(texturefile);
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__BORDER_SIZE:
        return borderSize != null;
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__ALLWAYS_TRANSPARENT:
        return allwaysTransparent != ALLWAYS_TRANSPARENT_EDEFAULT;
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__NO_REF_COUNT:
        return noRefCount != NO_REF_COUNT_EDEFAULT;
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__LOAD_TYPE:
        return LOAD_TYPE_EDEFAULT == null ? loadType != null : !LOAD_TYPE_EDEFAULT.equals(loadType);
      case Ck2gfxPackage.CORNERED_TILE_SPRITE_TYPE__TILING_CENTER:
        return tilingCenter != TILING_CENTER_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", texturefile: ");
    result.append(texturefile);
    result.append(", allwaysTransparent: ");
    result.append(allwaysTransparent);
    result.append(", noRefCount: ");
    result.append(noRefCount);
    result.append(", loadType: ");
    result.append(loadType);
    result.append(", tilingCenter: ");
    result.append(tilingCenter);
    result.append(')');
    return result.toString();
  }

} //CorneredTileSpriteTypeImpl
