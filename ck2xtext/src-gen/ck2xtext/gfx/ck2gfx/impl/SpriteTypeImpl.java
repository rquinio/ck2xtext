/**
 * generated by Xtext 2.14.0
 */
package ck2xtext.gfx.ck2gfx.impl;

import ck2xtext.gfx.ck2gfx.Ck2gfxPackage;
import ck2xtext.gfx.ck2gfx.SpriteType;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sprite Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.SpriteTypeImpl#getName <em>Name</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.SpriteTypeImpl#getTextureFile <em>Texture File</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.SpriteTypeImpl#getNoOfFrames <em>No Of Frames</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.SpriteTypeImpl#getLoadType <em>Load Type</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.SpriteTypeImpl#isAllwaysTransparent <em>Allways Transparent</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.SpriteTypeImpl#isNoRefCount <em>No Ref Count</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.SpriteTypeImpl#getEffectFile <em>Effect File</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.SpriteTypeImpl#isTransparenceCheck <em>Transparence Check</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.SpriteTypeImpl#isCanBeLowres <em>Can Be Lowres</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.SpriteTypeImpl#getClickSound <em>Click Sound</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SpriteTypeImpl extends MinimalEObjectImpl.Container implements SpriteType
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getTextureFile() <em>Texture File</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTextureFile()
   * @generated
   * @ordered
   */
  protected static final String TEXTURE_FILE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTextureFile() <em>Texture File</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTextureFile()
   * @generated
   * @ordered
   */
  protected String textureFile = TEXTURE_FILE_EDEFAULT;

  /**
   * The default value of the '{@link #getNoOfFrames() <em>No Of Frames</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNoOfFrames()
   * @generated
   * @ordered
   */
  protected static final int NO_OF_FRAMES_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getNoOfFrames() <em>No Of Frames</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNoOfFrames()
   * @generated
   * @ordered
   */
  protected int noOfFrames = NO_OF_FRAMES_EDEFAULT;

  /**
   * The default value of the '{@link #getLoadType() <em>Load Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLoadType()
   * @generated
   * @ordered
   */
  protected static final String LOAD_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLoadType() <em>Load Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLoadType()
   * @generated
   * @ordered
   */
  protected String loadType = LOAD_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #isAllwaysTransparent() <em>Allways Transparent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAllwaysTransparent()
   * @generated
   * @ordered
   */
  protected static final boolean ALLWAYS_TRANSPARENT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAllwaysTransparent() <em>Allways Transparent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAllwaysTransparent()
   * @generated
   * @ordered
   */
  protected boolean allwaysTransparent = ALLWAYS_TRANSPARENT_EDEFAULT;

  /**
   * The default value of the '{@link #isNoRefCount() <em>No Ref Count</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNoRefCount()
   * @generated
   * @ordered
   */
  protected static final boolean NO_REF_COUNT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNoRefCount() <em>No Ref Count</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNoRefCount()
   * @generated
   * @ordered
   */
  protected boolean noRefCount = NO_REF_COUNT_EDEFAULT;

  /**
   * The default value of the '{@link #getEffectFile() <em>Effect File</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEffectFile()
   * @generated
   * @ordered
   */
  protected static final String EFFECT_FILE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEffectFile() <em>Effect File</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEffectFile()
   * @generated
   * @ordered
   */
  protected String effectFile = EFFECT_FILE_EDEFAULT;

  /**
   * The default value of the '{@link #isTransparenceCheck() <em>Transparence Check</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTransparenceCheck()
   * @generated
   * @ordered
   */
  protected static final boolean TRANSPARENCE_CHECK_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isTransparenceCheck() <em>Transparence Check</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTransparenceCheck()
   * @generated
   * @ordered
   */
  protected boolean transparenceCheck = TRANSPARENCE_CHECK_EDEFAULT;

  /**
   * The default value of the '{@link #isCanBeLowres() <em>Can Be Lowres</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isCanBeLowres()
   * @generated
   * @ordered
   */
  protected static final boolean CAN_BE_LOWRES_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isCanBeLowres() <em>Can Be Lowres</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isCanBeLowres()
   * @generated
   * @ordered
   */
  protected boolean canBeLowres = CAN_BE_LOWRES_EDEFAULT;

  /**
   * The default value of the '{@link #getClickSound() <em>Click Sound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClickSound()
   * @generated
   * @ordered
   */
  protected static final String CLICK_SOUND_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getClickSound() <em>Click Sound</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClickSound()
   * @generated
   * @ordered
   */
  protected String clickSound = CLICK_SOUND_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SpriteTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Ck2gfxPackage.Literals.SPRITE_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.SPRITE_TYPE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTextureFile()
  {
    return textureFile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTextureFile(String newTextureFile)
  {
    String oldTextureFile = textureFile;
    textureFile = newTextureFile;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.SPRITE_TYPE__TEXTURE_FILE, oldTextureFile, textureFile));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getNoOfFrames()
  {
    return noOfFrames;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNoOfFrames(int newNoOfFrames)
  {
    int oldNoOfFrames = noOfFrames;
    noOfFrames = newNoOfFrames;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.SPRITE_TYPE__NO_OF_FRAMES, oldNoOfFrames, noOfFrames));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLoadType()
  {
    return loadType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLoadType(String newLoadType)
  {
    String oldLoadType = loadType;
    loadType = newLoadType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.SPRITE_TYPE__LOAD_TYPE, oldLoadType, loadType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isAllwaysTransparent()
  {
    return allwaysTransparent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAllwaysTransparent(boolean newAllwaysTransparent)
  {
    boolean oldAllwaysTransparent = allwaysTransparent;
    allwaysTransparent = newAllwaysTransparent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.SPRITE_TYPE__ALLWAYS_TRANSPARENT, oldAllwaysTransparent, allwaysTransparent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isNoRefCount()
  {
    return noRefCount;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNoRefCount(boolean newNoRefCount)
  {
    boolean oldNoRefCount = noRefCount;
    noRefCount = newNoRefCount;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.SPRITE_TYPE__NO_REF_COUNT, oldNoRefCount, noRefCount));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getEffectFile()
  {
    return effectFile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEffectFile(String newEffectFile)
  {
    String oldEffectFile = effectFile;
    effectFile = newEffectFile;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.SPRITE_TYPE__EFFECT_FILE, oldEffectFile, effectFile));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isTransparenceCheck()
  {
    return transparenceCheck;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTransparenceCheck(boolean newTransparenceCheck)
  {
    boolean oldTransparenceCheck = transparenceCheck;
    transparenceCheck = newTransparenceCheck;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.SPRITE_TYPE__TRANSPARENCE_CHECK, oldTransparenceCheck, transparenceCheck));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isCanBeLowres()
  {
    return canBeLowres;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCanBeLowres(boolean newCanBeLowres)
  {
    boolean oldCanBeLowres = canBeLowres;
    canBeLowres = newCanBeLowres;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.SPRITE_TYPE__CAN_BE_LOWRES, oldCanBeLowres, canBeLowres));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getClickSound()
  {
    return clickSound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setClickSound(String newClickSound)
  {
    String oldClickSound = clickSound;
    clickSound = newClickSound;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.SPRITE_TYPE__CLICK_SOUND, oldClickSound, clickSound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.SPRITE_TYPE__NAME:
        return getName();
      case Ck2gfxPackage.SPRITE_TYPE__TEXTURE_FILE:
        return getTextureFile();
      case Ck2gfxPackage.SPRITE_TYPE__NO_OF_FRAMES:
        return getNoOfFrames();
      case Ck2gfxPackage.SPRITE_TYPE__LOAD_TYPE:
        return getLoadType();
      case Ck2gfxPackage.SPRITE_TYPE__ALLWAYS_TRANSPARENT:
        return isAllwaysTransparent();
      case Ck2gfxPackage.SPRITE_TYPE__NO_REF_COUNT:
        return isNoRefCount();
      case Ck2gfxPackage.SPRITE_TYPE__EFFECT_FILE:
        return getEffectFile();
      case Ck2gfxPackage.SPRITE_TYPE__TRANSPARENCE_CHECK:
        return isTransparenceCheck();
      case Ck2gfxPackage.SPRITE_TYPE__CAN_BE_LOWRES:
        return isCanBeLowres();
      case Ck2gfxPackage.SPRITE_TYPE__CLICK_SOUND:
        return getClickSound();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.SPRITE_TYPE__NAME:
        setName((String)newValue);
        return;
      case Ck2gfxPackage.SPRITE_TYPE__TEXTURE_FILE:
        setTextureFile((String)newValue);
        return;
      case Ck2gfxPackage.SPRITE_TYPE__NO_OF_FRAMES:
        setNoOfFrames((Integer)newValue);
        return;
      case Ck2gfxPackage.SPRITE_TYPE__LOAD_TYPE:
        setLoadType((String)newValue);
        return;
      case Ck2gfxPackage.SPRITE_TYPE__ALLWAYS_TRANSPARENT:
        setAllwaysTransparent((Boolean)newValue);
        return;
      case Ck2gfxPackage.SPRITE_TYPE__NO_REF_COUNT:
        setNoRefCount((Boolean)newValue);
        return;
      case Ck2gfxPackage.SPRITE_TYPE__EFFECT_FILE:
        setEffectFile((String)newValue);
        return;
      case Ck2gfxPackage.SPRITE_TYPE__TRANSPARENCE_CHECK:
        setTransparenceCheck((Boolean)newValue);
        return;
      case Ck2gfxPackage.SPRITE_TYPE__CAN_BE_LOWRES:
        setCanBeLowres((Boolean)newValue);
        return;
      case Ck2gfxPackage.SPRITE_TYPE__CLICK_SOUND:
        setClickSound((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.SPRITE_TYPE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case Ck2gfxPackage.SPRITE_TYPE__TEXTURE_FILE:
        setTextureFile(TEXTURE_FILE_EDEFAULT);
        return;
      case Ck2gfxPackage.SPRITE_TYPE__NO_OF_FRAMES:
        setNoOfFrames(NO_OF_FRAMES_EDEFAULT);
        return;
      case Ck2gfxPackage.SPRITE_TYPE__LOAD_TYPE:
        setLoadType(LOAD_TYPE_EDEFAULT);
        return;
      case Ck2gfxPackage.SPRITE_TYPE__ALLWAYS_TRANSPARENT:
        setAllwaysTransparent(ALLWAYS_TRANSPARENT_EDEFAULT);
        return;
      case Ck2gfxPackage.SPRITE_TYPE__NO_REF_COUNT:
        setNoRefCount(NO_REF_COUNT_EDEFAULT);
        return;
      case Ck2gfxPackage.SPRITE_TYPE__EFFECT_FILE:
        setEffectFile(EFFECT_FILE_EDEFAULT);
        return;
      case Ck2gfxPackage.SPRITE_TYPE__TRANSPARENCE_CHECK:
        setTransparenceCheck(TRANSPARENCE_CHECK_EDEFAULT);
        return;
      case Ck2gfxPackage.SPRITE_TYPE__CAN_BE_LOWRES:
        setCanBeLowres(CAN_BE_LOWRES_EDEFAULT);
        return;
      case Ck2gfxPackage.SPRITE_TYPE__CLICK_SOUND:
        setClickSound(CLICK_SOUND_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.SPRITE_TYPE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case Ck2gfxPackage.SPRITE_TYPE__TEXTURE_FILE:
        return TEXTURE_FILE_EDEFAULT == null ? textureFile != null : !TEXTURE_FILE_EDEFAULT.equals(textureFile);
      case Ck2gfxPackage.SPRITE_TYPE__NO_OF_FRAMES:
        return noOfFrames != NO_OF_FRAMES_EDEFAULT;
      case Ck2gfxPackage.SPRITE_TYPE__LOAD_TYPE:
        return LOAD_TYPE_EDEFAULT == null ? loadType != null : !LOAD_TYPE_EDEFAULT.equals(loadType);
      case Ck2gfxPackage.SPRITE_TYPE__ALLWAYS_TRANSPARENT:
        return allwaysTransparent != ALLWAYS_TRANSPARENT_EDEFAULT;
      case Ck2gfxPackage.SPRITE_TYPE__NO_REF_COUNT:
        return noRefCount != NO_REF_COUNT_EDEFAULT;
      case Ck2gfxPackage.SPRITE_TYPE__EFFECT_FILE:
        return EFFECT_FILE_EDEFAULT == null ? effectFile != null : !EFFECT_FILE_EDEFAULT.equals(effectFile);
      case Ck2gfxPackage.SPRITE_TYPE__TRANSPARENCE_CHECK:
        return transparenceCheck != TRANSPARENCE_CHECK_EDEFAULT;
      case Ck2gfxPackage.SPRITE_TYPE__CAN_BE_LOWRES:
        return canBeLowres != CAN_BE_LOWRES_EDEFAULT;
      case Ck2gfxPackage.SPRITE_TYPE__CLICK_SOUND:
        return CLICK_SOUND_EDEFAULT == null ? clickSound != null : !CLICK_SOUND_EDEFAULT.equals(clickSound);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", textureFile: ");
    result.append(textureFile);
    result.append(", noOfFrames: ");
    result.append(noOfFrames);
    result.append(", loadType: ");
    result.append(loadType);
    result.append(", allwaysTransparent: ");
    result.append(allwaysTransparent);
    result.append(", noRefCount: ");
    result.append(noRefCount);
    result.append(", effectFile: ");
    result.append(effectFile);
    result.append(", transparenceCheck: ");
    result.append(transparenceCheck);
    result.append(", canBeLowres: ");
    result.append(canBeLowres);
    result.append(", clickSound: ");
    result.append(clickSound);
    result.append(')');
    return result.toString();
  }

} //SpriteTypeImpl
