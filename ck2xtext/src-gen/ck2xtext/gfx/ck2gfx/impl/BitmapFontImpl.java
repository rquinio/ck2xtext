/**
 * generated by Xtext 2.14.0
 */
package ck2xtext.gfx.ck2gfx.impl;

import ck2xtext.gfx.ck2gfx.BitmapFont;
import ck2xtext.gfx.ck2gfx.Ck2gfxPackage;
import ck2xtext.gfx.ck2gfx.ColorCode;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Bitmap Font</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.BitmapFontImpl#getName <em>Name</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.BitmapFontImpl#getFontName <em>Font Name</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.BitmapFontImpl#getColor <em>Color</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.BitmapFontImpl#isEffect <em>Effect</em>}</li>
 *   <li>{@link ck2xtext.gfx.ck2gfx.impl.BitmapFontImpl#getColorcodes <em>Colorcodes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BitmapFontImpl extends MinimalEObjectImpl.Container implements BitmapFont
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getFontName() <em>Font Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFontName()
   * @generated
   * @ordered
   */
  protected static final String FONT_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFontName() <em>Font Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFontName()
   * @generated
   * @ordered
   */
  protected String fontName = FONT_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getColor() <em>Color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColor()
   * @generated
   * @ordered
   */
  protected static final int COLOR_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getColor() <em>Color</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColor()
   * @generated
   * @ordered
   */
  protected int color = COLOR_EDEFAULT;

  /**
   * The default value of the '{@link #isEffect() <em>Effect</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEffect()
   * @generated
   * @ordered
   */
  protected static final boolean EFFECT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isEffect() <em>Effect</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEffect()
   * @generated
   * @ordered
   */
  protected boolean effect = EFFECT_EDEFAULT;

  /**
   * The cached value of the '{@link #getColorcodes() <em>Colorcodes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColorcodes()
   * @generated
   * @ordered
   */
  protected EList<ColorCode> colorcodes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BitmapFontImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Ck2gfxPackage.Literals.BITMAP_FONT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.BITMAP_FONT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getFontName()
  {
    return fontName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFontName(String newFontName)
  {
    String oldFontName = fontName;
    fontName = newFontName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.BITMAP_FONT__FONT_NAME, oldFontName, fontName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getColor()
  {
    return color;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setColor(int newColor)
  {
    int oldColor = color;
    color = newColor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.BITMAP_FONT__COLOR, oldColor, color));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isEffect()
  {
    return effect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEffect(boolean newEffect)
  {
    boolean oldEffect = effect;
    effect = newEffect;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Ck2gfxPackage.BITMAP_FONT__EFFECT, oldEffect, effect));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ColorCode> getColorcodes()
  {
    if (colorcodes == null)
    {
      colorcodes = new EObjectContainmentEList<ColorCode>(ColorCode.class, this, Ck2gfxPackage.BITMAP_FONT__COLORCODES);
    }
    return colorcodes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.BITMAP_FONT__COLORCODES:
        return ((InternalEList<?>)getColorcodes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.BITMAP_FONT__NAME:
        return getName();
      case Ck2gfxPackage.BITMAP_FONT__FONT_NAME:
        return getFontName();
      case Ck2gfxPackage.BITMAP_FONT__COLOR:
        return getColor();
      case Ck2gfxPackage.BITMAP_FONT__EFFECT:
        return isEffect();
      case Ck2gfxPackage.BITMAP_FONT__COLORCODES:
        return getColorcodes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.BITMAP_FONT__NAME:
        setName((String)newValue);
        return;
      case Ck2gfxPackage.BITMAP_FONT__FONT_NAME:
        setFontName((String)newValue);
        return;
      case Ck2gfxPackage.BITMAP_FONT__COLOR:
        setColor((Integer)newValue);
        return;
      case Ck2gfxPackage.BITMAP_FONT__EFFECT:
        setEffect((Boolean)newValue);
        return;
      case Ck2gfxPackage.BITMAP_FONT__COLORCODES:
        getColorcodes().clear();
        getColorcodes().addAll((Collection<? extends ColorCode>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.BITMAP_FONT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case Ck2gfxPackage.BITMAP_FONT__FONT_NAME:
        setFontName(FONT_NAME_EDEFAULT);
        return;
      case Ck2gfxPackage.BITMAP_FONT__COLOR:
        setColor(COLOR_EDEFAULT);
        return;
      case Ck2gfxPackage.BITMAP_FONT__EFFECT:
        setEffect(EFFECT_EDEFAULT);
        return;
      case Ck2gfxPackage.BITMAP_FONT__COLORCODES:
        getColorcodes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Ck2gfxPackage.BITMAP_FONT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case Ck2gfxPackage.BITMAP_FONT__FONT_NAME:
        return FONT_NAME_EDEFAULT == null ? fontName != null : !FONT_NAME_EDEFAULT.equals(fontName);
      case Ck2gfxPackage.BITMAP_FONT__COLOR:
        return color != COLOR_EDEFAULT;
      case Ck2gfxPackage.BITMAP_FONT__EFFECT:
        return effect != EFFECT_EDEFAULT;
      case Ck2gfxPackage.BITMAP_FONT__COLORCODES:
        return colorcodes != null && !colorcodes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", fontName: ");
    result.append(fontName);
    result.append(", color: ");
    result.append(color);
    result.append(", effect: ");
    result.append(effect);
    result.append(')');
    return result.toString();
  }

} //BitmapFontImpl
