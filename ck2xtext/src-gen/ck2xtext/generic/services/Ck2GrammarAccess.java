/*
 * generated by Xtext 2.14.0
 */
package ck2xtext.generic.services;

import ck2xtext.common.services.Ck2TerminalsGrammarAccess;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Ck2GrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ck2xtext.generic.Ck2.Model");
		private final Assignment cPropertiesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_0 = (RuleCall)cPropertiesAssignment.eContents().get(0);
		
		//Model:
		//	properties+=Property+;
		@Override public ParserRule getRule() { return rule; }
		
		//properties+=Property+
		public Assignment getPropertiesAssignment() { return cPropertiesAssignment; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_0() { return cPropertiesPropertyParserRuleCall_0; }
	}
	public class ListElemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ck2xtext.generic.Ck2.ListElem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDoubleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ListElem:
		//	ID | STRING | Integer | Double;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | STRING | Integer | Double
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//Integer
		public RuleCall getIntegerParserRuleCall_2() { return cIntegerParserRuleCall_2; }
		
		//Double
		public RuleCall getDoubleParserRuleCall_3() { return cDoubleParserRuleCall_3; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ck2xtext.generic.Ck2.List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElemsListElemParserRuleCall_1_0 = (RuleCall)cElemsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		///**
		// * data = {0 0 0 3 0 2 2}
		// * color = { 0.3 0.55 0.8 }
		// */ List:
		//	'{' elems+=ListElem+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' elems+=ListElem+ '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//elems+=ListElem+
		public Assignment getElemsAssignment_1() { return cElemsAssignment_1; }
		
		//ListElem
		public RuleCall getElemsListElemParserRuleCall_1_0() { return cElemsListElemParserRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ck2xtext.generic.Ck2.Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIdPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCommandPropertyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBoolPropertyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDatePropertyParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIntegerPropertyParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDoublePropertyParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cHexadecimalPropertyParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cListPropertyParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cClauseParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cProbabilityPropertyParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		///**
		// * Properties follow the pattern: propertyName = propertyValue
		// */ Property:
		//	StringProperty | IdProperty | CommandProperty | BoolProperty | DateProperty | IntegerProperty | DoubleProperty |
		//	HexadecimalProperty | ListProperty | Clause | ProbabilityProperty;
		@Override public ParserRule getRule() { return rule; }
		
		//StringProperty | IdProperty | CommandProperty | BoolProperty | DateProperty | IntegerProperty | DoubleProperty |
		//HexadecimalProperty | ListProperty | Clause | ProbabilityProperty
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringProperty
		public RuleCall getStringPropertyParserRuleCall_0() { return cStringPropertyParserRuleCall_0; }
		
		//IdProperty
		public RuleCall getIdPropertyParserRuleCall_1() { return cIdPropertyParserRuleCall_1; }
		
		//CommandProperty
		public RuleCall getCommandPropertyParserRuleCall_2() { return cCommandPropertyParserRuleCall_2; }
		
		//BoolProperty
		public RuleCall getBoolPropertyParserRuleCall_3() { return cBoolPropertyParserRuleCall_3; }
		
		//DateProperty
		public RuleCall getDatePropertyParserRuleCall_4() { return cDatePropertyParserRuleCall_4; }
		
		//IntegerProperty
		public RuleCall getIntegerPropertyParserRuleCall_5() { return cIntegerPropertyParserRuleCall_5; }
		
		//DoubleProperty
		public RuleCall getDoublePropertyParserRuleCall_6() { return cDoublePropertyParserRuleCall_6; }
		
		//HexadecimalProperty
		public RuleCall getHexadecimalPropertyParserRuleCall_7() { return cHexadecimalPropertyParserRuleCall_7; }
		
		//ListProperty
		public RuleCall getListPropertyParserRuleCall_8() { return cListPropertyParserRuleCall_8; }
		
		////NumericListProperty |
		// Clause
		public RuleCall getClauseParserRuleCall_9() { return cClauseParserRuleCall_9; }
		
		//ProbabilityProperty
		public RuleCall getProbabilityPropertyParserRuleCall_10() { return cProbabilityPropertyParserRuleCall_10; }
	}
	public class ClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ck2xtext.generic.Ck2.Clause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdClausePropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntClausePropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDateClausePropertyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///**
		// * Complex/nested properties
		// */ Clause:
		//	IdClauseProperty | IntClauseProperty | DateClauseProperty;
		@Override public ParserRule getRule() { return rule; }
		
		//IdClauseProperty | IntClauseProperty | DateClauseProperty
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IdClauseProperty
		public RuleCall getIdClausePropertyParserRuleCall_0() { return cIdClausePropertyParserRuleCall_0; }
		
		//IntClauseProperty
		public RuleCall getIntClausePropertyParserRuleCall_1() { return cIntClausePropertyParserRuleCall_1; }
		
		//DateClauseProperty
		public RuleCall getDateClausePropertyParserRuleCall_2() { return cDateClausePropertyParserRuleCall_2; }
	}
	public class StringPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ck2xtext.generic.Ck2.StringProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		///**
		// * from_dynasty_prefix = "af "
		// */ StringProperty:
		//	key=ID '=' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//key=ID '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class IdPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ck2xtext.generic.Ck2.IdProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueIDTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		///**
		// * modifier = default_culture_modifier
		// */ IdProperty:
		//	key=ID '=' value=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//key=ID '=' value=ID
		public Group getGroup() { return cGroup; }
		
		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=ID
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_2_0() { return cValueIDTerminalRuleCall_2_0; }
	}
	public class CommandPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ck2xtext.generic.Ck2.CommandProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueIDTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///**
		// * portrait = [From.GetID]
		// */ CommandProperty:
		//	key=ID '=' '[' value=ID ']';
		@Override public ParserRule getRule() { return rule; }
		
		//key=ID '=' '[' value=ID ']'
		public Group getGroup() { return cGroup; }
		
		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//value=ID
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_3_0() { return cValueIDTerminalRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class BoolPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ck2xtext.generic.Ck2.BoolProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueBOOLTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		///**
		// * dukes_called_kings = yes
		// */ BoolProperty:
		//	key=ID '=' value=BOOL;
		@Override public ParserRule getRule() { return rule; }
		
		//key=ID '=' value=BOOL
		public Group getGroup() { return cGroup; }
		
		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=BOOL
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//BOOL
		public RuleCall getValueBOOLTerminalRuleCall_2_0() { return cValueBOOLTerminalRuleCall_2_0; }
	}
	public class DatePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ck2xtext.generic.Ck2.DateProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueDateParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//DateProperty:
		//	key=ID '=' value=Date;
		@Override public ParserRule getRule() { return rule; }
		
		//key=ID '=' value=Date
		public Group getGroup() { return cGroup; }
		
		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Date
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Date
		public RuleCall getValueDateParserRuleCall_2_0() { return cValueDateParserRuleCall_2_0; }
	}
	public class IntegerPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ck2xtext.generic.Ck2.IntegerProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cKeyAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0_0 = (RuleCall)cKeyAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueIntegerParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cKeyAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_1_0_0 = (RuleCall)cKeyAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueIntegerParserRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cKeyAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_2_0_0 = (RuleCall)cKeyAssignment_2_0.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValueAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValueIntegerParserRuleCall_2_2_0 = (RuleCall)cValueAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cKeyAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_3_0_0 = (RuleCall)cKeyAssignment_3_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cValueAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cValueIntegerParserRuleCall_3_2_0 = (RuleCall)cValueAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cKeyAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_4_0_0 = (RuleCall)cKeyAssignment_4_0.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cValueAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cValueIntegerParserRuleCall_4_2_0 = (RuleCall)cValueAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cKeyAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_5_0_0 = (RuleCall)cKeyAssignment_5_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cValueAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cValueIntegerParserRuleCall_5_2_0 = (RuleCall)cValueAssignment_5_2.eContents().get(0);
		
		///**
		// * year = 1000
		// * Note: need to split int vs double, so that formatter doesn't add .0 to int
		// */ IntegerProperty:
		//	key=ID '=' value=Integer | key=ID '==' value=Integer | key=ID '>=' value=Integer | key=ID '>' value=Integer | key=ID
		//	'<=' value=Integer | key=ID '<' value=Integer;
		@Override public ParserRule getRule() { return rule; }
		
		//key=ID '=' value=Integer | key=ID '==' value=Integer | key=ID '>=' value=Integer | key=ID '>' value=Integer | key=ID
		//'<=' value=Integer | key=ID '<' value=Integer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//key=ID '=' value=Integer
		public Group getGroup_0() { return cGroup_0; }
		
		//key=ID
		public Assignment getKeyAssignment_0_0() { return cKeyAssignment_0_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0_0() { return cKeyIDTerminalRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//value=Integer
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//Integer
		public RuleCall getValueIntegerParserRuleCall_0_2_0() { return cValueIntegerParserRuleCall_0_2_0; }
		
		//key=ID '==' value=Integer
		public Group getGroup_1() { return cGroup_1; }
		
		//key=ID
		public Assignment getKeyAssignment_1_0() { return cKeyAssignment_1_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_1_0_0() { return cKeyIDTerminalRuleCall_1_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_1() { return cEqualsSignEqualsSignKeyword_1_1; }
		
		//value=Integer
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }
		
		//Integer
		public RuleCall getValueIntegerParserRuleCall_1_2_0() { return cValueIntegerParserRuleCall_1_2_0; }
		
		//key=ID '>=' value=Integer
		public Group getGroup_2() { return cGroup_2; }
		
		//key=ID
		public Assignment getKeyAssignment_2_0() { return cKeyAssignment_2_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_2_0_0() { return cKeyIDTerminalRuleCall_2_0_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_2_1() { return cGreaterThanSignEqualsSignKeyword_2_1; }
		
		//value=Integer
		public Assignment getValueAssignment_2_2() { return cValueAssignment_2_2; }
		
		//Integer
		public RuleCall getValueIntegerParserRuleCall_2_2_0() { return cValueIntegerParserRuleCall_2_2_0; }
		
		//key=ID '>' value=Integer
		public Group getGroup_3() { return cGroup_3; }
		
		//key=ID
		public Assignment getKeyAssignment_3_0() { return cKeyAssignment_3_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_3_0_0() { return cKeyIDTerminalRuleCall_3_0_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3_1() { return cGreaterThanSignKeyword_3_1; }
		
		//value=Integer
		public Assignment getValueAssignment_3_2() { return cValueAssignment_3_2; }
		
		//Integer
		public RuleCall getValueIntegerParserRuleCall_3_2_0() { return cValueIntegerParserRuleCall_3_2_0; }
		
		//key=ID '<=' value=Integer
		public Group getGroup_4() { return cGroup_4; }
		
		//key=ID
		public Assignment getKeyAssignment_4_0() { return cKeyAssignment_4_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_4_0_0() { return cKeyIDTerminalRuleCall_4_0_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_4_1() { return cLessThanSignEqualsSignKeyword_4_1; }
		
		//value=Integer
		public Assignment getValueAssignment_4_2() { return cValueAssignment_4_2; }
		
		//Integer
		public RuleCall getValueIntegerParserRuleCall_4_2_0() { return cValueIntegerParserRuleCall_4_2_0; }
		
		//key=ID '<' value=Integer
		public Group getGroup_5() { return cGroup_5; }
		
		//key=ID
		public Assignment getKeyAssignment_5_0() { return cKeyAssignment_5_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_5_0_0() { return cKeyIDTerminalRuleCall_5_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_5_1() { return cLessThanSignKeyword_5_1; }
		
		//value=Integer
		public Assignment getValueAssignment_5_2() { return cValueAssignment_5_2; }
		
		//Integer
		public RuleCall getValueIntegerParserRuleCall_5_2_0() { return cValueIntegerParserRuleCall_5_2_0; }
	}
	public class DoublePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ck2xtext.generic.Ck2.DoubleProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cKeyAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0_0 = (RuleCall)cKeyAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueDoubleParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cKeyAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_1_0_0 = (RuleCall)cKeyAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueDoubleParserRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cKeyAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_2_0_0 = (RuleCall)cKeyAssignment_2_0.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValueAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValueDoubleParserRuleCall_2_2_0 = (RuleCall)cValueAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cKeyAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_3_0_0 = (RuleCall)cKeyAssignment_3_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cValueAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cValueDoubleParserRuleCall_3_2_0 = (RuleCall)cValueAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cKeyAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_4_0_0 = (RuleCall)cKeyAssignment_4_0.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cValueAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cValueDoubleParserRuleCall_4_2_0 = (RuleCall)cValueAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cKeyAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_5_0_0 = (RuleCall)cKeyAssignment_5_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cValueAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cValueDoubleParserRuleCall_5_2_0 = (RuleCall)cValueAssignment_5_2.eContents().get(0);
		
		///**
		// * factor = 0.9
		// */ DoubleProperty:
		//	key=ID '=' value=Double | key=ID '==' value=Double | key=ID '>=' value=Double | key=ID '>' value=Double | key=ID '<='
		//	value=Double | key=ID '<' value=Double;
		@Override public ParserRule getRule() { return rule; }
		
		//key=ID '=' value=Double | key=ID '==' value=Double | key=ID '>=' value=Double | key=ID '>' value=Double | key=ID '<='
		//value=Double | key=ID '<' value=Double
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//key=ID '=' value=Double
		public Group getGroup_0() { return cGroup_0; }
		
		//key=ID
		public Assignment getKeyAssignment_0_0() { return cKeyAssignment_0_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0_0() { return cKeyIDTerminalRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//value=Double
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//Double
		public RuleCall getValueDoubleParserRuleCall_0_2_0() { return cValueDoubleParserRuleCall_0_2_0; }
		
		//key=ID '==' value=Double
		public Group getGroup_1() { return cGroup_1; }
		
		//key=ID
		public Assignment getKeyAssignment_1_0() { return cKeyAssignment_1_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_1_0_0() { return cKeyIDTerminalRuleCall_1_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_1() { return cEqualsSignEqualsSignKeyword_1_1; }
		
		//value=Double
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }
		
		//Double
		public RuleCall getValueDoubleParserRuleCall_1_2_0() { return cValueDoubleParserRuleCall_1_2_0; }
		
		//key=ID '>=' value=Double
		public Group getGroup_2() { return cGroup_2; }
		
		//key=ID
		public Assignment getKeyAssignment_2_0() { return cKeyAssignment_2_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_2_0_0() { return cKeyIDTerminalRuleCall_2_0_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_2_1() { return cGreaterThanSignEqualsSignKeyword_2_1; }
		
		//value=Double
		public Assignment getValueAssignment_2_2() { return cValueAssignment_2_2; }
		
		//Double
		public RuleCall getValueDoubleParserRuleCall_2_2_0() { return cValueDoubleParserRuleCall_2_2_0; }
		
		//key=ID '>' value=Double
		public Group getGroup_3() { return cGroup_3; }
		
		//key=ID
		public Assignment getKeyAssignment_3_0() { return cKeyAssignment_3_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_3_0_0() { return cKeyIDTerminalRuleCall_3_0_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3_1() { return cGreaterThanSignKeyword_3_1; }
		
		//value=Double
		public Assignment getValueAssignment_3_2() { return cValueAssignment_3_2; }
		
		//Double
		public RuleCall getValueDoubleParserRuleCall_3_2_0() { return cValueDoubleParserRuleCall_3_2_0; }
		
		//key=ID '<=' value=Double
		public Group getGroup_4() { return cGroup_4; }
		
		//key=ID
		public Assignment getKeyAssignment_4_0() { return cKeyAssignment_4_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_4_0_0() { return cKeyIDTerminalRuleCall_4_0_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_4_1() { return cLessThanSignEqualsSignKeyword_4_1; }
		
		//value=Double
		public Assignment getValueAssignment_4_2() { return cValueAssignment_4_2; }
		
		//Double
		public RuleCall getValueDoubleParserRuleCall_4_2_0() { return cValueDoubleParserRuleCall_4_2_0; }
		
		//key=ID '<' value=Double
		public Group getGroup_5() { return cGroup_5; }
		
		//key=ID
		public Assignment getKeyAssignment_5_0() { return cKeyAssignment_5_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_5_0_0() { return cKeyIDTerminalRuleCall_5_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_5_1() { return cLessThanSignKeyword_5_1; }
		
		//value=Double
		public Assignment getValueAssignment_5_2() { return cValueAssignment_5_2; }
		
		//Double
		public RuleCall getValueDoubleParserRuleCall_5_2_0() { return cValueDoubleParserRuleCall_5_2_0; }
	}
	public class HexadecimalPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ck2xtext.generic.Ck2.HexadecimalProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueHEXTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		///**
		// * color = 0xff0000
		// */ HexadecimalProperty:
		//	key=ID '=' value=HEX;
		@Override public ParserRule getRule() { return rule; }
		
		//key=ID '=' value=HEX
		public Group getGroup() { return cGroup; }
		
		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=HEX
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//HEX
		public RuleCall getValueHEXTerminalRuleCall_2_0() { return cValueHEXTerminalRuleCall_2_0; }
	}
	public class ListPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ck2xtext.generic.Ck2.ListProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueListParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		///**
		// * male_names = { Ale Alfr_Alf }
		// */ ListProperty:
		//	key=ID '=' value=List;
		@Override public ParserRule getRule() { return rule; }
		
		//key=ID '=' value=List
		public Group getGroup() { return cGroup; }
		
		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=List
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//List
		public RuleCall getValueListParserRuleCall_2_0() { return cValueListParserRuleCall_2_0; }
	}
	public class IdClausePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ck2xtext.generic.Ck2.IdClauseProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cValueLeftCurlyBracketKeyword_2_0 = (Keyword)cValueAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///**
		// * option = { ... }
		// */ IdClauseProperty:
		//	name=ID '=' value='{' properties+=Property* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' value='{' properties+=Property* '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value='{'
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//'{'
		public Keyword getValueLeftCurlyBracketKeyword_2_0() { return cValueLeftCurlyBracketKeyword_2_0; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_0() { return cPropertiesPropertyParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class IntClausePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ck2xtext.generic.Ck2.IntClauseProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameINTTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cValueLeftCurlyBracketKeyword_2_0 = (Keyword)cValueAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///**
		// * 123 = { ... }
		// */ IntClauseProperty:
		//	name=INT '=' value='{' properties+=Property* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=INT '=' value='{' properties+=Property* '}'
		public Group getGroup() { return cGroup; }
		
		//name=INT
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//INT
		public RuleCall getNameINTTerminalRuleCall_0_0() { return cNameINTTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value='{'
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//'{'
		public Keyword getValueLeftCurlyBracketKeyword_2_0() { return cValueLeftCurlyBracketKeyword_2_0; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_0() { return cPropertiesPropertyParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DateClausePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ck2xtext.generic.Ck2.DateClauseProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameDateParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cValueLeftCurlyBracketKeyword_2_0 = (Keyword)cValueAssignment_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///**
		// * 769.1.1 = { ... }
		// */ DateClauseProperty:
		//	name=Date '=' value='{' properties+=Property* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=Date '=' value='{' properties+=Property* '}'
		public Group getGroup() { return cGroup; }
		
		//name=Date
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Date
		public RuleCall getNameDateParserRuleCall_0_0() { return cNameDateParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value='{'
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//'{'
		public Keyword getValueLeftCurlyBracketKeyword_2_0() { return cValueLeftCurlyBracketKeyword_2_0; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_0() { return cPropertiesPropertyParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProbabilityPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ck2xtext.generic.Ck2.ProbabilityProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyINTTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueListElemParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		///**
		// * 100 = 4000
		// * 100 = HL.10610
		// */ ProbabilityProperty:
		//	key=INT '=' value=ListElem;
		@Override public ParserRule getRule() { return rule; }
		
		//key=INT '=' value=ListElem
		public Group getGroup() { return cGroup; }
		
		//key=INT
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//INT
		public RuleCall getKeyINTTerminalRuleCall_0_0() { return cKeyINTTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=ListElem
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ListElem
		public RuleCall getValueListElemParserRuleCall_2_0() { return cValueListElemParserRuleCall_2_0; }
	}
	
	
	private final ModelElements pModel;
	private final ListElemElements pListElem;
	private final ListElements pList;
	private final PropertyElements pProperty;
	private final ClauseElements pClause;
	private final StringPropertyElements pStringProperty;
	private final IdPropertyElements pIdProperty;
	private final CommandPropertyElements pCommandProperty;
	private final BoolPropertyElements pBoolProperty;
	private final DatePropertyElements pDateProperty;
	private final IntegerPropertyElements pIntegerProperty;
	private final DoublePropertyElements pDoubleProperty;
	private final HexadecimalPropertyElements pHexadecimalProperty;
	private final ListPropertyElements pListProperty;
	private final IdClausePropertyElements pIdClauseProperty;
	private final IntClausePropertyElements pIntClauseProperty;
	private final DateClausePropertyElements pDateClauseProperty;
	private final ProbabilityPropertyElements pProbabilityProperty;
	
	private final Grammar grammar;
	
	private final Ck2TerminalsGrammarAccess gaCk2Terminals;

	@Inject
	public Ck2GrammarAccess(GrammarProvider grammarProvider,
			Ck2TerminalsGrammarAccess gaCk2Terminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCk2Terminals = gaCk2Terminals;
		this.pModel = new ModelElements();
		this.pListElem = new ListElemElements();
		this.pList = new ListElements();
		this.pProperty = new PropertyElements();
		this.pClause = new ClauseElements();
		this.pStringProperty = new StringPropertyElements();
		this.pIdProperty = new IdPropertyElements();
		this.pCommandProperty = new CommandPropertyElements();
		this.pBoolProperty = new BoolPropertyElements();
		this.pDateProperty = new DatePropertyElements();
		this.pIntegerProperty = new IntegerPropertyElements();
		this.pDoubleProperty = new DoublePropertyElements();
		this.pHexadecimalProperty = new HexadecimalPropertyElements();
		this.pListProperty = new ListPropertyElements();
		this.pIdClauseProperty = new IdClausePropertyElements();
		this.pIntClauseProperty = new IntClausePropertyElements();
		this.pDateClauseProperty = new DateClausePropertyElements();
		this.pProbabilityProperty = new ProbabilityPropertyElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ck2xtext.generic.Ck2".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public Ck2TerminalsGrammarAccess getCk2TerminalsGrammarAccess() {
		return gaCk2Terminals;
	}

	
	//Model:
	//	properties+=Property+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//ListElem:
	//	ID | STRING | Integer | Double;
	public ListElemElements getListElemAccess() {
		return pListElem;
	}
	
	public ParserRule getListElemRule() {
		return getListElemAccess().getRule();
	}
	
	///**
	// * data = {0 0 0 3 0 2 2}
	// * color = { 0.3 0.55 0.8 }
	// */ List:
	//	'{' elems+=ListElem+ '}';
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	///**
	// * Properties follow the pattern: propertyName = propertyValue
	// */ Property:
	//	StringProperty | IdProperty | CommandProperty | BoolProperty | DateProperty | IntegerProperty | DoubleProperty |
	//	HexadecimalProperty | ListProperty | Clause | ProbabilityProperty;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	///**
	// * Complex/nested properties
	// */ Clause:
	//	IdClauseProperty | IntClauseProperty | DateClauseProperty;
	public ClauseElements getClauseAccess() {
		return pClause;
	}
	
	public ParserRule getClauseRule() {
		return getClauseAccess().getRule();
	}
	
	///**
	// * from_dynasty_prefix = "af "
	// */ StringProperty:
	//	key=ID '=' value=STRING;
	public StringPropertyElements getStringPropertyAccess() {
		return pStringProperty;
	}
	
	public ParserRule getStringPropertyRule() {
		return getStringPropertyAccess().getRule();
	}
	
	///**
	// * modifier = default_culture_modifier
	// */ IdProperty:
	//	key=ID '=' value=ID;
	public IdPropertyElements getIdPropertyAccess() {
		return pIdProperty;
	}
	
	public ParserRule getIdPropertyRule() {
		return getIdPropertyAccess().getRule();
	}
	
	///**
	// * portrait = [From.GetID]
	// */ CommandProperty:
	//	key=ID '=' '[' value=ID ']';
	public CommandPropertyElements getCommandPropertyAccess() {
		return pCommandProperty;
	}
	
	public ParserRule getCommandPropertyRule() {
		return getCommandPropertyAccess().getRule();
	}
	
	///**
	// * dukes_called_kings = yes
	// */ BoolProperty:
	//	key=ID '=' value=BOOL;
	public BoolPropertyElements getBoolPropertyAccess() {
		return pBoolProperty;
	}
	
	public ParserRule getBoolPropertyRule() {
		return getBoolPropertyAccess().getRule();
	}
	
	//DateProperty:
	//	key=ID '=' value=Date;
	public DatePropertyElements getDatePropertyAccess() {
		return pDateProperty;
	}
	
	public ParserRule getDatePropertyRule() {
		return getDatePropertyAccess().getRule();
	}
	
	///**
	// * year = 1000
	// * Note: need to split int vs double, so that formatter doesn't add .0 to int
	// */ IntegerProperty:
	//	key=ID '=' value=Integer | key=ID '==' value=Integer | key=ID '>=' value=Integer | key=ID '>' value=Integer | key=ID
	//	'<=' value=Integer | key=ID '<' value=Integer;
	public IntegerPropertyElements getIntegerPropertyAccess() {
		return pIntegerProperty;
	}
	
	public ParserRule getIntegerPropertyRule() {
		return getIntegerPropertyAccess().getRule();
	}
	
	///**
	// * factor = 0.9
	// */ DoubleProperty:
	//	key=ID '=' value=Double | key=ID '==' value=Double | key=ID '>=' value=Double | key=ID '>' value=Double | key=ID '<='
	//	value=Double | key=ID '<' value=Double;
	public DoublePropertyElements getDoublePropertyAccess() {
		return pDoubleProperty;
	}
	
	public ParserRule getDoublePropertyRule() {
		return getDoublePropertyAccess().getRule();
	}
	
	///**
	// * color = 0xff0000
	// */ HexadecimalProperty:
	//	key=ID '=' value=HEX;
	public HexadecimalPropertyElements getHexadecimalPropertyAccess() {
		return pHexadecimalProperty;
	}
	
	public ParserRule getHexadecimalPropertyRule() {
		return getHexadecimalPropertyAccess().getRule();
	}
	
	///**
	// * male_names = { Ale Alfr_Alf }
	// */ ListProperty:
	//	key=ID '=' value=List;
	public ListPropertyElements getListPropertyAccess() {
		return pListProperty;
	}
	
	public ParserRule getListPropertyRule() {
		return getListPropertyAccess().getRule();
	}
	
	///**
	// * option = { ... }
	// */ IdClauseProperty:
	//	name=ID '=' value='{' properties+=Property* '}';
	public IdClausePropertyElements getIdClausePropertyAccess() {
		return pIdClauseProperty;
	}
	
	public ParserRule getIdClausePropertyRule() {
		return getIdClausePropertyAccess().getRule();
	}
	
	///**
	// * 123 = { ... }
	// */ IntClauseProperty:
	//	name=INT '=' value='{' properties+=Property* '}';
	public IntClausePropertyElements getIntClausePropertyAccess() {
		return pIntClauseProperty;
	}
	
	public ParserRule getIntClausePropertyRule() {
		return getIntClausePropertyAccess().getRule();
	}
	
	///**
	// * 769.1.1 = { ... }
	// */ DateClauseProperty:
	//	name=Date '=' value='{' properties+=Property* '}';
	public DateClausePropertyElements getDateClausePropertyAccess() {
		return pDateClauseProperty;
	}
	
	public ParserRule getDateClausePropertyRule() {
		return getDateClausePropertyAccess().getRule();
	}
	
	///**
	// * 100 = 4000
	// * 100 = HL.10610
	// */ ProbabilityProperty:
	//	key=INT '=' value=ListElem;
	public ProbabilityPropertyElements getProbabilityPropertyAccess() {
		return pProbabilityProperty;
	}
	
	public ParserRule getProbabilityPropertyRule() {
		return getProbabilityPropertyAccess().getRule();
	}
	
	//terminal fragment DIGIT:
	//	'0'..'9';
	public TerminalRule getDIGITRule() {
		return gaCk2Terminals.getDIGITRule();
	}
	
	//terminal BOOL returns ecore::EBoolean:
	//	'yes' | 'no';
	public TerminalRule getBOOLRule() {
		return gaCk2Terminals.getBOOLRule();
	}
	
	//terminal HEX returns ecore::EInt:
	//	'0x' (DIGIT | 'a' | 'b' | 'c' | 'd' | 'e' | 'f')+;
	public TerminalRule getHEXRule() {
		return gaCk2Terminals.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	DIGIT+;
	public TerminalRule getINTRule() {
		return gaCk2Terminals.getINTRule();
	}
	
	//terminal fragment NON_ASCII_CAP:
	//	'À' | 'Á' | 'Â' | 'Ã' | 'Ä' | 'Å' | 'Æ' | 'Ç' | 'È' | 'É' | 'Ê' | 'Ë' | 'Ì' | 'Í' | 'Î' | 'Ï' | 'Ð' | 'Ñ' | 'Ò' | 'Ó'
	//	| 'Ô' | 'Õ' | 'Ö' | 'Ø' | 'Š' | 'Ù' | 'Ú' | 'Û' | 'Ü' | 'Ý' | 'Ÿ' | 'Þ' | 'ß' | 'Œ';
	public TerminalRule getNON_ASCII_CAPRule() {
		return gaCk2Terminals.getNON_ASCII_CAPRule();
	}
	
	//terminal fragment NON_ASCII_LOW:
	//	'à' | 'á' | 'â' | 'ã' | 'ä' | 'å' | 'æ' | 'ç' | 'è' | 'é' | 'ê' | 'ë' | 'ì' | 'í' | 'î' | 'ï' | 'ð' | 'ñ' | 'ò' | 'ó'
	//	| 'ô' | 'õ' | 'ö' | 'ø' | 'š' | 'ù' | 'ú' | 'û' | 'ü' | 'ý' | 'ÿ' | 'ž' | 'þ' | 'œ';
	public TerminalRule getNON_ASCII_LOWRule() {
		return gaCk2Terminals.getNON_ASCII_LOWRule();
	}
	
	//terminal fragment ID_PART:
	//	'a'..'z' | 'A'..'Z' | NON_ASCII_LOW | NON_ASCII_CAP | '<';
	public TerminalRule getID_PARTRule() {
		return gaCk2Terminals.getID_PARTRule();
	}
	
	//terminal ID:
	//	'^'? ID_PART (ID_PART | DIGIT | '_' | '-' | '\'' | '’' | ':' | '.' | '>' | '@')*;
	public TerminalRule getIDRule() {
		return gaCk2Terminals.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaCk2Terminals.getSTRINGRule();
	}
	
	//terminal SL_COMMENT:
	//	'#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaCk2Terminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaCk2Terminals.getWSRule();
	}
	
	///**
	// * See ck2xtext.conversion.DateValueConverter
	// */ Date ecore::EDate:
	//	INT '.' INT '.' INT;
	public Ck2TerminalsGrammarAccess.DateElements getDateAccess() {
		return gaCk2Terminals.getDateAccess();
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}
	
	//Integer ecore::EInt:
	//	('-' | '+')? INT;
	public Ck2TerminalsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaCk2Terminals.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}
	
	///**
	// * Note: Double do not match integers, for proper formatting
	// * 
	// * May end with 'f' in some cases
	// */ Double
	//ecore::EDouble:
	//	Integer '.' INT 'f'?;
	public Ck2TerminalsGrammarAccess.DoubleElements getDoubleAccess() {
		return gaCk2Terminals.getDoubleAccess();
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}
	
	///*
	// * Used when decimals are not used systematically.
	// * 
	// * Warning: formatting might be messed up.
	// */ Number
	//ecore::EDouble:
	//	Double | Integer 'f'?;
	public Ck2TerminalsGrammarAccess.NumberElements getNumberAccess() {
		return gaCk2Terminals.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
}
