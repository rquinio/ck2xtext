/**
 * generated by Xtext 2.9.1
 */
package ck2xtext.tests;

import ck2xtext.ck2.Model;
import ck2xtext.tests.Ck2InjectorProvider;
import com.google.inject.Inject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.junit4.util.ResourceHelper;
import org.eclipse.xtext.junit4.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(Ck2InjectorProvider.class)
@SuppressWarnings("all")
public class Ck2ParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Inject
  private ResourceHelper resourceHelper;
  
  @Inject
  private ValidationTestHelper validationHelper;
  
  @Ignore
  @Test
  public void test2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("north_germanic = {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("graphical_cultures = { westerngfx }");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("norse = {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("graphical_cultures = { norsegfx }");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("color = { 0 0 0 }");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("male_names = { ä â }");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("female_names = { ä â }");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("dukes_called_kings = yes");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("seafarer = yes");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Resource resource = this.resourceHelper.resource(_builder);
      this.validationHelper.assertNoIssues(resource);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Ignore
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("north_germanic = {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("graphical_cultures = { westerngfx }");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("norse = {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("graphical_cultures = { norsegfx }");
      _builder.newLine();
      _builder.append("\t\t\t\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("color = { 0 0 0 }");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("male_names = { ä â }");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("female_names = { ä â }");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("dukes_called_kings = yes");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("seafarer = yes");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      this.validationHelper.assertNoIssues(result);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Ignore
  @Test
  public void testSerilization() {
  }
}
